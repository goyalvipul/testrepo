
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model HealthCareFacility
 * 
 */
export type HealthCareFacility = {
  uuid: string
  name: string
}

/**
 * Model Worker
 * 
 */
export type Worker = {
  uuid: string
  firstName: string
  lastName: string
}

/**
 * Model Shift
 * 
 */
export type Shift = {
  uuid: string
  facilityUuid: string
  description: string
  baseHourlyRate: number
  createdAt: Date
  updatedAt: Date
  startTime: Date
  endTime: Date
  workerSlots: number
}

/**
 * Model ShiftAssignment
 * 
 */
export type ShiftAssignment = {
  shiftUuid: string
  workerUuid: string
  rating: number | null
}

/**
 * Model BlockedWorker
 * 
 */
export type BlockedWorker = {
  shiftUuid: string
  workerUuid: string
  facilityUuid: string
  createdAt: Date
  blockReason: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more HealthCareFacilities
 * const healthCareFacilities = await prisma.healthCareFacility.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more HealthCareFacilities
   * const healthCareFacilities = await prisma.healthCareFacility.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.healthCareFacility`: Exposes CRUD operations for the **HealthCareFacility** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HealthCareFacilities
    * const healthCareFacilities = await prisma.healthCareFacility.findMany()
    * ```
    */
  get healthCareFacility(): Prisma.HealthCareFacilityDelegate<GlobalReject>;

  /**
   * `prisma.worker`: Exposes CRUD operations for the **Worker** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Workers
    * const workers = await prisma.worker.findMany()
    * ```
    */
  get worker(): Prisma.WorkerDelegate<GlobalReject>;

  /**
   * `prisma.shift`: Exposes CRUD operations for the **Shift** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Shifts
    * const shifts = await prisma.shift.findMany()
    * ```
    */
  get shift(): Prisma.ShiftDelegate<GlobalReject>;

  /**
   * `prisma.shiftAssignment`: Exposes CRUD operations for the **ShiftAssignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShiftAssignments
    * const shiftAssignments = await prisma.shiftAssignment.findMany()
    * ```
    */
  get shiftAssignment(): Prisma.ShiftAssignmentDelegate<GlobalReject>;

  /**
   * `prisma.blockedWorker`: Exposes CRUD operations for the **BlockedWorker** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BlockedWorkers
    * const blockedWorkers = await prisma.blockedWorker.findMany()
    * ```
    */
  get blockedWorker(): Prisma.BlockedWorkerDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.4.0
   * Query Engine version: f352a33b70356f46311da8b00d83386dd9f145d6
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export import FieldRef = runtime.FieldRef

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    HealthCareFacility: 'HealthCareFacility',
    Worker: 'Worker',
    Shift: 'Shift',
    ShiftAssignment: 'ShiftAssignment',
    BlockedWorker: 'BlockedWorker'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type HealthCareFacilityCountOutputType
   */


  export type HealthCareFacilityCountOutputType = {
    shifts: number
    blockedWorkers: number
  }

  export type HealthCareFacilityCountOutputTypeSelect = {
    shifts?: boolean
    blockedWorkers?: boolean
  }

  export type HealthCareFacilityCountOutputTypeGetPayload<
    S extends boolean | null | undefined | HealthCareFacilityCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? HealthCareFacilityCountOutputType
    : S extends undefined
    ? never
    : S extends HealthCareFacilityCountOutputTypeArgs
    ?'include' extends U
    ? HealthCareFacilityCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof HealthCareFacilityCountOutputType ? HealthCareFacilityCountOutputType[P] : never
  } 
    : HealthCareFacilityCountOutputType
  : HealthCareFacilityCountOutputType




  // Custom InputTypes

  /**
   * HealthCareFacilityCountOutputType without action
   */
  export type HealthCareFacilityCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the HealthCareFacilityCountOutputType
     * 
    **/
    select?: HealthCareFacilityCountOutputTypeSelect | null
  }



  /**
   * Count Type WorkerCountOutputType
   */


  export type WorkerCountOutputType = {
    shiftAssignments: number
    blockedAtFacilities: number
  }

  export type WorkerCountOutputTypeSelect = {
    shiftAssignments?: boolean
    blockedAtFacilities?: boolean
  }

  export type WorkerCountOutputTypeGetPayload<
    S extends boolean | null | undefined | WorkerCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? WorkerCountOutputType
    : S extends undefined
    ? never
    : S extends WorkerCountOutputTypeArgs
    ?'include' extends U
    ? WorkerCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof WorkerCountOutputType ? WorkerCountOutputType[P] : never
  } 
    : WorkerCountOutputType
  : WorkerCountOutputType




  // Custom InputTypes

  /**
   * WorkerCountOutputType without action
   */
  export type WorkerCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the WorkerCountOutputType
     * 
    **/
    select?: WorkerCountOutputTypeSelect | null
  }



  /**
   * Count Type ShiftCountOutputType
   */


  export type ShiftCountOutputType = {
    shiftAssignments: number
    blockedWorkers: number
  }

  export type ShiftCountOutputTypeSelect = {
    shiftAssignments?: boolean
    blockedWorkers?: boolean
  }

  export type ShiftCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ShiftCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ShiftCountOutputType
    : S extends undefined
    ? never
    : S extends ShiftCountOutputTypeArgs
    ?'include' extends U
    ? ShiftCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ShiftCountOutputType ? ShiftCountOutputType[P] : never
  } 
    : ShiftCountOutputType
  : ShiftCountOutputType




  // Custom InputTypes

  /**
   * ShiftCountOutputType without action
   */
  export type ShiftCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ShiftCountOutputType
     * 
    **/
    select?: ShiftCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model HealthCareFacility
   */


  export type AggregateHealthCareFacility = {
    _count: HealthCareFacilityCountAggregateOutputType | null
    _min: HealthCareFacilityMinAggregateOutputType | null
    _max: HealthCareFacilityMaxAggregateOutputType | null
  }

  export type HealthCareFacilityMinAggregateOutputType = {
    uuid: string | null
    name: string | null
  }

  export type HealthCareFacilityMaxAggregateOutputType = {
    uuid: string | null
    name: string | null
  }

  export type HealthCareFacilityCountAggregateOutputType = {
    uuid: number
    name: number
    _all: number
  }


  export type HealthCareFacilityMinAggregateInputType = {
    uuid?: true
    name?: true
  }

  export type HealthCareFacilityMaxAggregateInputType = {
    uuid?: true
    name?: true
  }

  export type HealthCareFacilityCountAggregateInputType = {
    uuid?: true
    name?: true
    _all?: true
  }

  export type HealthCareFacilityAggregateArgs = {
    /**
     * Filter which HealthCareFacility to aggregate.
     * 
    **/
    where?: HealthCareFacilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HealthCareFacilities to fetch.
     * 
    **/
    orderBy?: Enumerable<HealthCareFacilityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: HealthCareFacilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HealthCareFacilities from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HealthCareFacilities.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HealthCareFacilities
    **/
    _count?: true | HealthCareFacilityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HealthCareFacilityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HealthCareFacilityMaxAggregateInputType
  }

  export type GetHealthCareFacilityAggregateType<T extends HealthCareFacilityAggregateArgs> = {
        [P in keyof T & keyof AggregateHealthCareFacility]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHealthCareFacility[P]>
      : GetScalarType<T[P], AggregateHealthCareFacility[P]>
  }




  export type HealthCareFacilityGroupByArgs = {
    where?: HealthCareFacilityWhereInput
    orderBy?: Enumerable<HealthCareFacilityOrderByWithAggregationInput>
    by: Array<HealthCareFacilityScalarFieldEnum>
    having?: HealthCareFacilityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HealthCareFacilityCountAggregateInputType | true
    _min?: HealthCareFacilityMinAggregateInputType
    _max?: HealthCareFacilityMaxAggregateInputType
  }


  export type HealthCareFacilityGroupByOutputType = {
    uuid: string
    name: string
    _count: HealthCareFacilityCountAggregateOutputType | null
    _min: HealthCareFacilityMinAggregateOutputType | null
    _max: HealthCareFacilityMaxAggregateOutputType | null
  }

  type GetHealthCareFacilityGroupByPayload<T extends HealthCareFacilityGroupByArgs> = PrismaPromise<
    Array<
      PickArray<HealthCareFacilityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HealthCareFacilityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HealthCareFacilityGroupByOutputType[P]>
            : GetScalarType<T[P], HealthCareFacilityGroupByOutputType[P]>
        }
      >
    >


  export type HealthCareFacilitySelect = {
    uuid?: boolean
    shifts?: boolean | ShiftFindManyArgs
    name?: boolean
    blockedWorkers?: boolean | BlockedWorkerFindManyArgs
    _count?: boolean | HealthCareFacilityCountOutputTypeArgs
  }

  export type HealthCareFacilityInclude = {
    shifts?: boolean | ShiftFindManyArgs
    blockedWorkers?: boolean | BlockedWorkerFindManyArgs
    _count?: boolean | HealthCareFacilityCountOutputTypeArgs
  }

  export type HealthCareFacilityGetPayload<
    S extends boolean | null | undefined | HealthCareFacilityArgs,
    U = keyof S
      > = S extends true
        ? HealthCareFacility
    : S extends undefined
    ? never
    : S extends HealthCareFacilityArgs | HealthCareFacilityFindManyArgs
    ?'include' extends U
    ? HealthCareFacility  & {
    [P in TrueKeys<S['include']>]:
        P extends 'shifts' ? Array < ShiftGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'blockedWorkers' ? Array < BlockedWorkerGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? HealthCareFacilityCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'shifts' ? Array < ShiftGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'blockedWorkers' ? Array < BlockedWorkerGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? HealthCareFacilityCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof HealthCareFacility ? HealthCareFacility[P] : never
  } 
    : HealthCareFacility
  : HealthCareFacility


  type HealthCareFacilityCountArgs = Merge<
    Omit<HealthCareFacilityFindManyArgs, 'select' | 'include'> & {
      select?: HealthCareFacilityCountAggregateInputType | true
    }
  >

  export interface HealthCareFacilityDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one HealthCareFacility that matches the filter.
     * @param {HealthCareFacilityFindUniqueArgs} args - Arguments to find a HealthCareFacility
     * @example
     * // Get one HealthCareFacility
     * const healthCareFacility = await prisma.healthCareFacility.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HealthCareFacilityFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, HealthCareFacilityFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'HealthCareFacility'> extends True ? CheckSelect<T, Prisma__HealthCareFacilityClient<HealthCareFacility>, Prisma__HealthCareFacilityClient<HealthCareFacilityGetPayload<T>>> : CheckSelect<T, Prisma__HealthCareFacilityClient<HealthCareFacility | null, null>, Prisma__HealthCareFacilityClient<HealthCareFacilityGetPayload<T> | null, null>>

    /**
     * Find the first HealthCareFacility that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthCareFacilityFindFirstArgs} args - Arguments to find a HealthCareFacility
     * @example
     * // Get one HealthCareFacility
     * const healthCareFacility = await prisma.healthCareFacility.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HealthCareFacilityFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, HealthCareFacilityFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'HealthCareFacility'> extends True ? CheckSelect<T, Prisma__HealthCareFacilityClient<HealthCareFacility>, Prisma__HealthCareFacilityClient<HealthCareFacilityGetPayload<T>>> : CheckSelect<T, Prisma__HealthCareFacilityClient<HealthCareFacility | null, null>, Prisma__HealthCareFacilityClient<HealthCareFacilityGetPayload<T> | null, null>>

    /**
     * Find zero or more HealthCareFacilities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthCareFacilityFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HealthCareFacilities
     * const healthCareFacilities = await prisma.healthCareFacility.findMany()
     * 
     * // Get first 10 HealthCareFacilities
     * const healthCareFacilities = await prisma.healthCareFacility.findMany({ take: 10 })
     * 
     * // Only select the `uuid`
     * const healthCareFacilityWithUuidOnly = await prisma.healthCareFacility.findMany({ select: { uuid: true } })
     * 
    **/
    findMany<T extends HealthCareFacilityFindManyArgs>(
      args?: SelectSubset<T, HealthCareFacilityFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<HealthCareFacility>>, PrismaPromise<Array<HealthCareFacilityGetPayload<T>>>>

    /**
     * Create a HealthCareFacility.
     * @param {HealthCareFacilityCreateArgs} args - Arguments to create a HealthCareFacility.
     * @example
     * // Create one HealthCareFacility
     * const HealthCareFacility = await prisma.healthCareFacility.create({
     *   data: {
     *     // ... data to create a HealthCareFacility
     *   }
     * })
     * 
    **/
    create<T extends HealthCareFacilityCreateArgs>(
      args: SelectSubset<T, HealthCareFacilityCreateArgs>
    ): CheckSelect<T, Prisma__HealthCareFacilityClient<HealthCareFacility>, Prisma__HealthCareFacilityClient<HealthCareFacilityGetPayload<T>>>

    /**
     * Create many HealthCareFacilities.
     *     @param {HealthCareFacilityCreateManyArgs} args - Arguments to create many HealthCareFacilities.
     *     @example
     *     // Create many HealthCareFacilities
     *     const healthCareFacility = await prisma.healthCareFacility.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HealthCareFacilityCreateManyArgs>(
      args?: SelectSubset<T, HealthCareFacilityCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a HealthCareFacility.
     * @param {HealthCareFacilityDeleteArgs} args - Arguments to delete one HealthCareFacility.
     * @example
     * // Delete one HealthCareFacility
     * const HealthCareFacility = await prisma.healthCareFacility.delete({
     *   where: {
     *     // ... filter to delete one HealthCareFacility
     *   }
     * })
     * 
    **/
    delete<T extends HealthCareFacilityDeleteArgs>(
      args: SelectSubset<T, HealthCareFacilityDeleteArgs>
    ): CheckSelect<T, Prisma__HealthCareFacilityClient<HealthCareFacility>, Prisma__HealthCareFacilityClient<HealthCareFacilityGetPayload<T>>>

    /**
     * Update one HealthCareFacility.
     * @param {HealthCareFacilityUpdateArgs} args - Arguments to update one HealthCareFacility.
     * @example
     * // Update one HealthCareFacility
     * const healthCareFacility = await prisma.healthCareFacility.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HealthCareFacilityUpdateArgs>(
      args: SelectSubset<T, HealthCareFacilityUpdateArgs>
    ): CheckSelect<T, Prisma__HealthCareFacilityClient<HealthCareFacility>, Prisma__HealthCareFacilityClient<HealthCareFacilityGetPayload<T>>>

    /**
     * Delete zero or more HealthCareFacilities.
     * @param {HealthCareFacilityDeleteManyArgs} args - Arguments to filter HealthCareFacilities to delete.
     * @example
     * // Delete a few HealthCareFacilities
     * const { count } = await prisma.healthCareFacility.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HealthCareFacilityDeleteManyArgs>(
      args?: SelectSubset<T, HealthCareFacilityDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more HealthCareFacilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthCareFacilityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HealthCareFacilities
     * const healthCareFacility = await prisma.healthCareFacility.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HealthCareFacilityUpdateManyArgs>(
      args: SelectSubset<T, HealthCareFacilityUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one HealthCareFacility.
     * @param {HealthCareFacilityUpsertArgs} args - Arguments to update or create a HealthCareFacility.
     * @example
     * // Update or create a HealthCareFacility
     * const healthCareFacility = await prisma.healthCareFacility.upsert({
     *   create: {
     *     // ... data to create a HealthCareFacility
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HealthCareFacility we want to update
     *   }
     * })
    **/
    upsert<T extends HealthCareFacilityUpsertArgs>(
      args: SelectSubset<T, HealthCareFacilityUpsertArgs>
    ): CheckSelect<T, Prisma__HealthCareFacilityClient<HealthCareFacility>, Prisma__HealthCareFacilityClient<HealthCareFacilityGetPayload<T>>>

    /**
     * Find one HealthCareFacility that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {HealthCareFacilityFindUniqueOrThrowArgs} args - Arguments to find a HealthCareFacility
     * @example
     * // Get one HealthCareFacility
     * const healthCareFacility = await prisma.healthCareFacility.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HealthCareFacilityFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, HealthCareFacilityFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__HealthCareFacilityClient<HealthCareFacility>, Prisma__HealthCareFacilityClient<HealthCareFacilityGetPayload<T>>>

    /**
     * Find the first HealthCareFacility that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthCareFacilityFindFirstOrThrowArgs} args - Arguments to find a HealthCareFacility
     * @example
     * // Get one HealthCareFacility
     * const healthCareFacility = await prisma.healthCareFacility.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HealthCareFacilityFindFirstOrThrowArgs>(
      args?: SelectSubset<T, HealthCareFacilityFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__HealthCareFacilityClient<HealthCareFacility>, Prisma__HealthCareFacilityClient<HealthCareFacilityGetPayload<T>>>

    /**
     * Count the number of HealthCareFacilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthCareFacilityCountArgs} args - Arguments to filter HealthCareFacilities to count.
     * @example
     * // Count the number of HealthCareFacilities
     * const count = await prisma.healthCareFacility.count({
     *   where: {
     *     // ... the filter for the HealthCareFacilities we want to count
     *   }
     * })
    **/
    count<T extends HealthCareFacilityCountArgs>(
      args?: Subset<T, HealthCareFacilityCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HealthCareFacilityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HealthCareFacility.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthCareFacilityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HealthCareFacilityAggregateArgs>(args: Subset<T, HealthCareFacilityAggregateArgs>): PrismaPromise<GetHealthCareFacilityAggregateType<T>>

    /**
     * Group by HealthCareFacility.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthCareFacilityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HealthCareFacilityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HealthCareFacilityGroupByArgs['orderBy'] }
        : { orderBy?: HealthCareFacilityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HealthCareFacilityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHealthCareFacilityGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for HealthCareFacility.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__HealthCareFacilityClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    shifts<T extends ShiftFindManyArgs = {}>(args?: Subset<T, ShiftFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Shift>| Null>, PrismaPromise<Array<ShiftGetPayload<T>>| Null>>;

    blockedWorkers<T extends BlockedWorkerFindManyArgs = {}>(args?: Subset<T, BlockedWorkerFindManyArgs>): CheckSelect<T, PrismaPromise<Array<BlockedWorker>| Null>, PrismaPromise<Array<BlockedWorkerGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * HealthCareFacility base type for findUnique actions
   */
  export type HealthCareFacilityFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the HealthCareFacility
     * 
    **/
    select?: HealthCareFacilitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: HealthCareFacilityInclude | null
    /**
     * Filter, which HealthCareFacility to fetch.
     * 
    **/
    where: HealthCareFacilityWhereUniqueInput
  }

  /**
   * HealthCareFacility: findUnique
   */
  export interface HealthCareFacilityFindUniqueArgs extends HealthCareFacilityFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * HealthCareFacility base type for findFirst actions
   */
  export type HealthCareFacilityFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the HealthCareFacility
     * 
    **/
    select?: HealthCareFacilitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: HealthCareFacilityInclude | null
    /**
     * Filter, which HealthCareFacility to fetch.
     * 
    **/
    where?: HealthCareFacilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HealthCareFacilities to fetch.
     * 
    **/
    orderBy?: Enumerable<HealthCareFacilityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HealthCareFacilities.
     * 
    **/
    cursor?: HealthCareFacilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HealthCareFacilities from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HealthCareFacilities.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HealthCareFacilities.
     * 
    **/
    distinct?: Enumerable<HealthCareFacilityScalarFieldEnum>
  }

  /**
   * HealthCareFacility: findFirst
   */
  export interface HealthCareFacilityFindFirstArgs extends HealthCareFacilityFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * HealthCareFacility findMany
   */
  export type HealthCareFacilityFindManyArgs = {
    /**
     * Select specific fields to fetch from the HealthCareFacility
     * 
    **/
    select?: HealthCareFacilitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: HealthCareFacilityInclude | null
    /**
     * Filter, which HealthCareFacilities to fetch.
     * 
    **/
    where?: HealthCareFacilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HealthCareFacilities to fetch.
     * 
    **/
    orderBy?: Enumerable<HealthCareFacilityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HealthCareFacilities.
     * 
    **/
    cursor?: HealthCareFacilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HealthCareFacilities from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HealthCareFacilities.
     * 
    **/
    skip?: number
    distinct?: Enumerable<HealthCareFacilityScalarFieldEnum>
  }


  /**
   * HealthCareFacility create
   */
  export type HealthCareFacilityCreateArgs = {
    /**
     * Select specific fields to fetch from the HealthCareFacility
     * 
    **/
    select?: HealthCareFacilitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: HealthCareFacilityInclude | null
    /**
     * The data needed to create a HealthCareFacility.
     * 
    **/
    data: XOR<HealthCareFacilityCreateInput, HealthCareFacilityUncheckedCreateInput>
  }


  /**
   * HealthCareFacility createMany
   */
  export type HealthCareFacilityCreateManyArgs = {
    /**
     * The data used to create many HealthCareFacilities.
     * 
    **/
    data: Enumerable<HealthCareFacilityCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * HealthCareFacility update
   */
  export type HealthCareFacilityUpdateArgs = {
    /**
     * Select specific fields to fetch from the HealthCareFacility
     * 
    **/
    select?: HealthCareFacilitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: HealthCareFacilityInclude | null
    /**
     * The data needed to update a HealthCareFacility.
     * 
    **/
    data: XOR<HealthCareFacilityUpdateInput, HealthCareFacilityUncheckedUpdateInput>
    /**
     * Choose, which HealthCareFacility to update.
     * 
    **/
    where: HealthCareFacilityWhereUniqueInput
  }


  /**
   * HealthCareFacility updateMany
   */
  export type HealthCareFacilityUpdateManyArgs = {
    /**
     * The data used to update HealthCareFacilities.
     * 
    **/
    data: XOR<HealthCareFacilityUpdateManyMutationInput, HealthCareFacilityUncheckedUpdateManyInput>
    /**
     * Filter which HealthCareFacilities to update
     * 
    **/
    where?: HealthCareFacilityWhereInput
  }


  /**
   * HealthCareFacility upsert
   */
  export type HealthCareFacilityUpsertArgs = {
    /**
     * Select specific fields to fetch from the HealthCareFacility
     * 
    **/
    select?: HealthCareFacilitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: HealthCareFacilityInclude | null
    /**
     * The filter to search for the HealthCareFacility to update in case it exists.
     * 
    **/
    where: HealthCareFacilityWhereUniqueInput
    /**
     * In case the HealthCareFacility found by the `where` argument doesn't exist, create a new HealthCareFacility with this data.
     * 
    **/
    create: XOR<HealthCareFacilityCreateInput, HealthCareFacilityUncheckedCreateInput>
    /**
     * In case the HealthCareFacility was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<HealthCareFacilityUpdateInput, HealthCareFacilityUncheckedUpdateInput>
  }


  /**
   * HealthCareFacility delete
   */
  export type HealthCareFacilityDeleteArgs = {
    /**
     * Select specific fields to fetch from the HealthCareFacility
     * 
    **/
    select?: HealthCareFacilitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: HealthCareFacilityInclude | null
    /**
     * Filter which HealthCareFacility to delete.
     * 
    **/
    where: HealthCareFacilityWhereUniqueInput
  }


  /**
   * HealthCareFacility deleteMany
   */
  export type HealthCareFacilityDeleteManyArgs = {
    /**
     * Filter which HealthCareFacilities to delete
     * 
    **/
    where?: HealthCareFacilityWhereInput
  }


  /**
   * HealthCareFacility: findUniqueOrThrow
   */
  export type HealthCareFacilityFindUniqueOrThrowArgs = HealthCareFacilityFindUniqueArgsBase
      

  /**
   * HealthCareFacility: findFirstOrThrow
   */
  export type HealthCareFacilityFindFirstOrThrowArgs = HealthCareFacilityFindFirstArgsBase
      

  /**
   * HealthCareFacility without action
   */
  export type HealthCareFacilityArgs = {
    /**
     * Select specific fields to fetch from the HealthCareFacility
     * 
    **/
    select?: HealthCareFacilitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: HealthCareFacilityInclude | null
  }



  /**
   * Model Worker
   */


  export type AggregateWorker = {
    _count: WorkerCountAggregateOutputType | null
    _min: WorkerMinAggregateOutputType | null
    _max: WorkerMaxAggregateOutputType | null
  }

  export type WorkerMinAggregateOutputType = {
    uuid: string | null
    firstName: string | null
    lastName: string | null
  }

  export type WorkerMaxAggregateOutputType = {
    uuid: string | null
    firstName: string | null
    lastName: string | null
  }

  export type WorkerCountAggregateOutputType = {
    uuid: number
    firstName: number
    lastName: number
    _all: number
  }


  export type WorkerMinAggregateInputType = {
    uuid?: true
    firstName?: true
    lastName?: true
  }

  export type WorkerMaxAggregateInputType = {
    uuid?: true
    firstName?: true
    lastName?: true
  }

  export type WorkerCountAggregateInputType = {
    uuid?: true
    firstName?: true
    lastName?: true
    _all?: true
  }

  export type WorkerAggregateArgs = {
    /**
     * Filter which Worker to aggregate.
     * 
    **/
    where?: WorkerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workers to fetch.
     * 
    **/
    orderBy?: Enumerable<WorkerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: WorkerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Workers
    **/
    _count?: true | WorkerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkerMaxAggregateInputType
  }

  export type GetWorkerAggregateType<T extends WorkerAggregateArgs> = {
        [P in keyof T & keyof AggregateWorker]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorker[P]>
      : GetScalarType<T[P], AggregateWorker[P]>
  }




  export type WorkerGroupByArgs = {
    where?: WorkerWhereInput
    orderBy?: Enumerable<WorkerOrderByWithAggregationInput>
    by: Array<WorkerScalarFieldEnum>
    having?: WorkerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkerCountAggregateInputType | true
    _min?: WorkerMinAggregateInputType
    _max?: WorkerMaxAggregateInputType
  }


  export type WorkerGroupByOutputType = {
    uuid: string
    firstName: string
    lastName: string
    _count: WorkerCountAggregateOutputType | null
    _min: WorkerMinAggregateOutputType | null
    _max: WorkerMaxAggregateOutputType | null
  }

  type GetWorkerGroupByPayload<T extends WorkerGroupByArgs> = PrismaPromise<
    Array<
      PickArray<WorkerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkerGroupByOutputType[P]>
            : GetScalarType<T[P], WorkerGroupByOutputType[P]>
        }
      >
    >


  export type WorkerSelect = {
    uuid?: boolean
    shiftAssignments?: boolean | ShiftAssignmentFindManyArgs
    firstName?: boolean
    lastName?: boolean
    blockedAtFacilities?: boolean | BlockedWorkerFindManyArgs
    _count?: boolean | WorkerCountOutputTypeArgs
  }

  export type WorkerInclude = {
    shiftAssignments?: boolean | ShiftAssignmentFindManyArgs
    blockedAtFacilities?: boolean | BlockedWorkerFindManyArgs
    _count?: boolean | WorkerCountOutputTypeArgs
  }

  export type WorkerGetPayload<
    S extends boolean | null | undefined | WorkerArgs,
    U = keyof S
      > = S extends true
        ? Worker
    : S extends undefined
    ? never
    : S extends WorkerArgs | WorkerFindManyArgs
    ?'include' extends U
    ? Worker  & {
    [P in TrueKeys<S['include']>]:
        P extends 'shiftAssignments' ? Array < ShiftAssignmentGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'blockedAtFacilities' ? Array < BlockedWorkerGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? WorkerCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'shiftAssignments' ? Array < ShiftAssignmentGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'blockedAtFacilities' ? Array < BlockedWorkerGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? WorkerCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Worker ? Worker[P] : never
  } 
    : Worker
  : Worker


  type WorkerCountArgs = Merge<
    Omit<WorkerFindManyArgs, 'select' | 'include'> & {
      select?: WorkerCountAggregateInputType | true
    }
  >

  export interface WorkerDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Worker that matches the filter.
     * @param {WorkerFindUniqueArgs} args - Arguments to find a Worker
     * @example
     * // Get one Worker
     * const worker = await prisma.worker.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WorkerFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, WorkerFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Worker'> extends True ? CheckSelect<T, Prisma__WorkerClient<Worker>, Prisma__WorkerClient<WorkerGetPayload<T>>> : CheckSelect<T, Prisma__WorkerClient<Worker | null, null>, Prisma__WorkerClient<WorkerGetPayload<T> | null, null>>

    /**
     * Find the first Worker that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkerFindFirstArgs} args - Arguments to find a Worker
     * @example
     * // Get one Worker
     * const worker = await prisma.worker.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WorkerFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, WorkerFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Worker'> extends True ? CheckSelect<T, Prisma__WorkerClient<Worker>, Prisma__WorkerClient<WorkerGetPayload<T>>> : CheckSelect<T, Prisma__WorkerClient<Worker | null, null>, Prisma__WorkerClient<WorkerGetPayload<T> | null, null>>

    /**
     * Find zero or more Workers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Workers
     * const workers = await prisma.worker.findMany()
     * 
     * // Get first 10 Workers
     * const workers = await prisma.worker.findMany({ take: 10 })
     * 
     * // Only select the `uuid`
     * const workerWithUuidOnly = await prisma.worker.findMany({ select: { uuid: true } })
     * 
    **/
    findMany<T extends WorkerFindManyArgs>(
      args?: SelectSubset<T, WorkerFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Worker>>, PrismaPromise<Array<WorkerGetPayload<T>>>>

    /**
     * Create a Worker.
     * @param {WorkerCreateArgs} args - Arguments to create a Worker.
     * @example
     * // Create one Worker
     * const Worker = await prisma.worker.create({
     *   data: {
     *     // ... data to create a Worker
     *   }
     * })
     * 
    **/
    create<T extends WorkerCreateArgs>(
      args: SelectSubset<T, WorkerCreateArgs>
    ): CheckSelect<T, Prisma__WorkerClient<Worker>, Prisma__WorkerClient<WorkerGetPayload<T>>>

    /**
     * Create many Workers.
     *     @param {WorkerCreateManyArgs} args - Arguments to create many Workers.
     *     @example
     *     // Create many Workers
     *     const worker = await prisma.worker.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WorkerCreateManyArgs>(
      args?: SelectSubset<T, WorkerCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Worker.
     * @param {WorkerDeleteArgs} args - Arguments to delete one Worker.
     * @example
     * // Delete one Worker
     * const Worker = await prisma.worker.delete({
     *   where: {
     *     // ... filter to delete one Worker
     *   }
     * })
     * 
    **/
    delete<T extends WorkerDeleteArgs>(
      args: SelectSubset<T, WorkerDeleteArgs>
    ): CheckSelect<T, Prisma__WorkerClient<Worker>, Prisma__WorkerClient<WorkerGetPayload<T>>>

    /**
     * Update one Worker.
     * @param {WorkerUpdateArgs} args - Arguments to update one Worker.
     * @example
     * // Update one Worker
     * const worker = await prisma.worker.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WorkerUpdateArgs>(
      args: SelectSubset<T, WorkerUpdateArgs>
    ): CheckSelect<T, Prisma__WorkerClient<Worker>, Prisma__WorkerClient<WorkerGetPayload<T>>>

    /**
     * Delete zero or more Workers.
     * @param {WorkerDeleteManyArgs} args - Arguments to filter Workers to delete.
     * @example
     * // Delete a few Workers
     * const { count } = await prisma.worker.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WorkerDeleteManyArgs>(
      args?: SelectSubset<T, WorkerDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Workers
     * const worker = await prisma.worker.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WorkerUpdateManyArgs>(
      args: SelectSubset<T, WorkerUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Worker.
     * @param {WorkerUpsertArgs} args - Arguments to update or create a Worker.
     * @example
     * // Update or create a Worker
     * const worker = await prisma.worker.upsert({
     *   create: {
     *     // ... data to create a Worker
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Worker we want to update
     *   }
     * })
    **/
    upsert<T extends WorkerUpsertArgs>(
      args: SelectSubset<T, WorkerUpsertArgs>
    ): CheckSelect<T, Prisma__WorkerClient<Worker>, Prisma__WorkerClient<WorkerGetPayload<T>>>

    /**
     * Find one Worker that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {WorkerFindUniqueOrThrowArgs} args - Arguments to find a Worker
     * @example
     * // Get one Worker
     * const worker = await prisma.worker.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WorkerFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, WorkerFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__WorkerClient<Worker>, Prisma__WorkerClient<WorkerGetPayload<T>>>

    /**
     * Find the first Worker that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkerFindFirstOrThrowArgs} args - Arguments to find a Worker
     * @example
     * // Get one Worker
     * const worker = await prisma.worker.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WorkerFindFirstOrThrowArgs>(
      args?: SelectSubset<T, WorkerFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__WorkerClient<Worker>, Prisma__WorkerClient<WorkerGetPayload<T>>>

    /**
     * Count the number of Workers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkerCountArgs} args - Arguments to filter Workers to count.
     * @example
     * // Count the number of Workers
     * const count = await prisma.worker.count({
     *   where: {
     *     // ... the filter for the Workers we want to count
     *   }
     * })
    **/
    count<T extends WorkerCountArgs>(
      args?: Subset<T, WorkerCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Worker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkerAggregateArgs>(args: Subset<T, WorkerAggregateArgs>): PrismaPromise<GetWorkerAggregateType<T>>

    /**
     * Group by Worker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkerGroupByArgs['orderBy'] }
        : { orderBy?: WorkerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkerGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Worker.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__WorkerClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    shiftAssignments<T extends ShiftAssignmentFindManyArgs = {}>(args?: Subset<T, ShiftAssignmentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ShiftAssignment>| Null>, PrismaPromise<Array<ShiftAssignmentGetPayload<T>>| Null>>;

    blockedAtFacilities<T extends BlockedWorkerFindManyArgs = {}>(args?: Subset<T, BlockedWorkerFindManyArgs>): CheckSelect<T, PrismaPromise<Array<BlockedWorker>| Null>, PrismaPromise<Array<BlockedWorkerGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Worker base type for findUnique actions
   */
  export type WorkerFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Worker
     * 
    **/
    select?: WorkerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkerInclude | null
    /**
     * Filter, which Worker to fetch.
     * 
    **/
    where: WorkerWhereUniqueInput
  }

  /**
   * Worker: findUnique
   */
  export interface WorkerFindUniqueArgs extends WorkerFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Worker base type for findFirst actions
   */
  export type WorkerFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Worker
     * 
    **/
    select?: WorkerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkerInclude | null
    /**
     * Filter, which Worker to fetch.
     * 
    **/
    where?: WorkerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workers to fetch.
     * 
    **/
    orderBy?: Enumerable<WorkerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Workers.
     * 
    **/
    cursor?: WorkerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Workers.
     * 
    **/
    distinct?: Enumerable<WorkerScalarFieldEnum>
  }

  /**
   * Worker: findFirst
   */
  export interface WorkerFindFirstArgs extends WorkerFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Worker findMany
   */
  export type WorkerFindManyArgs = {
    /**
     * Select specific fields to fetch from the Worker
     * 
    **/
    select?: WorkerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkerInclude | null
    /**
     * Filter, which Workers to fetch.
     * 
    **/
    where?: WorkerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workers to fetch.
     * 
    **/
    orderBy?: Enumerable<WorkerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Workers.
     * 
    **/
    cursor?: WorkerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workers.
     * 
    **/
    skip?: number
    distinct?: Enumerable<WorkerScalarFieldEnum>
  }


  /**
   * Worker create
   */
  export type WorkerCreateArgs = {
    /**
     * Select specific fields to fetch from the Worker
     * 
    **/
    select?: WorkerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkerInclude | null
    /**
     * The data needed to create a Worker.
     * 
    **/
    data: XOR<WorkerCreateInput, WorkerUncheckedCreateInput>
  }


  /**
   * Worker createMany
   */
  export type WorkerCreateManyArgs = {
    /**
     * The data used to create many Workers.
     * 
    **/
    data: Enumerable<WorkerCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Worker update
   */
  export type WorkerUpdateArgs = {
    /**
     * Select specific fields to fetch from the Worker
     * 
    **/
    select?: WorkerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkerInclude | null
    /**
     * The data needed to update a Worker.
     * 
    **/
    data: XOR<WorkerUpdateInput, WorkerUncheckedUpdateInput>
    /**
     * Choose, which Worker to update.
     * 
    **/
    where: WorkerWhereUniqueInput
  }


  /**
   * Worker updateMany
   */
  export type WorkerUpdateManyArgs = {
    /**
     * The data used to update Workers.
     * 
    **/
    data: XOR<WorkerUpdateManyMutationInput, WorkerUncheckedUpdateManyInput>
    /**
     * Filter which Workers to update
     * 
    **/
    where?: WorkerWhereInput
  }


  /**
   * Worker upsert
   */
  export type WorkerUpsertArgs = {
    /**
     * Select specific fields to fetch from the Worker
     * 
    **/
    select?: WorkerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkerInclude | null
    /**
     * The filter to search for the Worker to update in case it exists.
     * 
    **/
    where: WorkerWhereUniqueInput
    /**
     * In case the Worker found by the `where` argument doesn't exist, create a new Worker with this data.
     * 
    **/
    create: XOR<WorkerCreateInput, WorkerUncheckedCreateInput>
    /**
     * In case the Worker was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<WorkerUpdateInput, WorkerUncheckedUpdateInput>
  }


  /**
   * Worker delete
   */
  export type WorkerDeleteArgs = {
    /**
     * Select specific fields to fetch from the Worker
     * 
    **/
    select?: WorkerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkerInclude | null
    /**
     * Filter which Worker to delete.
     * 
    **/
    where: WorkerWhereUniqueInput
  }


  /**
   * Worker deleteMany
   */
  export type WorkerDeleteManyArgs = {
    /**
     * Filter which Workers to delete
     * 
    **/
    where?: WorkerWhereInput
  }


  /**
   * Worker: findUniqueOrThrow
   */
  export type WorkerFindUniqueOrThrowArgs = WorkerFindUniqueArgsBase
      

  /**
   * Worker: findFirstOrThrow
   */
  export type WorkerFindFirstOrThrowArgs = WorkerFindFirstArgsBase
      

  /**
   * Worker without action
   */
  export type WorkerArgs = {
    /**
     * Select specific fields to fetch from the Worker
     * 
    **/
    select?: WorkerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkerInclude | null
  }



  /**
   * Model Shift
   */


  export type AggregateShift = {
    _count: ShiftCountAggregateOutputType | null
    _avg: ShiftAvgAggregateOutputType | null
    _sum: ShiftSumAggregateOutputType | null
    _min: ShiftMinAggregateOutputType | null
    _max: ShiftMaxAggregateOutputType | null
  }

  export type ShiftAvgAggregateOutputType = {
    baseHourlyRate: number | null
    workerSlots: number | null
  }

  export type ShiftSumAggregateOutputType = {
    baseHourlyRate: number | null
    workerSlots: number | null
  }

  export type ShiftMinAggregateOutputType = {
    uuid: string | null
    facilityUuid: string | null
    description: string | null
    baseHourlyRate: number | null
    createdAt: Date | null
    updatedAt: Date | null
    startTime: Date | null
    endTime: Date | null
    workerSlots: number | null
  }

  export type ShiftMaxAggregateOutputType = {
    uuid: string | null
    facilityUuid: string | null
    description: string | null
    baseHourlyRate: number | null
    createdAt: Date | null
    updatedAt: Date | null
    startTime: Date | null
    endTime: Date | null
    workerSlots: number | null
  }

  export type ShiftCountAggregateOutputType = {
    uuid: number
    facilityUuid: number
    description: number
    baseHourlyRate: number
    createdAt: number
    updatedAt: number
    startTime: number
    endTime: number
    workerSlots: number
    _all: number
  }


  export type ShiftAvgAggregateInputType = {
    baseHourlyRate?: true
    workerSlots?: true
  }

  export type ShiftSumAggregateInputType = {
    baseHourlyRate?: true
    workerSlots?: true
  }

  export type ShiftMinAggregateInputType = {
    uuid?: true
    facilityUuid?: true
    description?: true
    baseHourlyRate?: true
    createdAt?: true
    updatedAt?: true
    startTime?: true
    endTime?: true
    workerSlots?: true
  }

  export type ShiftMaxAggregateInputType = {
    uuid?: true
    facilityUuid?: true
    description?: true
    baseHourlyRate?: true
    createdAt?: true
    updatedAt?: true
    startTime?: true
    endTime?: true
    workerSlots?: true
  }

  export type ShiftCountAggregateInputType = {
    uuid?: true
    facilityUuid?: true
    description?: true
    baseHourlyRate?: true
    createdAt?: true
    updatedAt?: true
    startTime?: true
    endTime?: true
    workerSlots?: true
    _all?: true
  }

  export type ShiftAggregateArgs = {
    /**
     * Filter which Shift to aggregate.
     * 
    **/
    where?: ShiftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shifts to fetch.
     * 
    **/
    orderBy?: Enumerable<ShiftOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ShiftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shifts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shifts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Shifts
    **/
    _count?: true | ShiftCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShiftAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShiftSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShiftMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShiftMaxAggregateInputType
  }

  export type GetShiftAggregateType<T extends ShiftAggregateArgs> = {
        [P in keyof T & keyof AggregateShift]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShift[P]>
      : GetScalarType<T[P], AggregateShift[P]>
  }




  export type ShiftGroupByArgs = {
    where?: ShiftWhereInput
    orderBy?: Enumerable<ShiftOrderByWithAggregationInput>
    by: Array<ShiftScalarFieldEnum>
    having?: ShiftScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShiftCountAggregateInputType | true
    _avg?: ShiftAvgAggregateInputType
    _sum?: ShiftSumAggregateInputType
    _min?: ShiftMinAggregateInputType
    _max?: ShiftMaxAggregateInputType
  }


  export type ShiftGroupByOutputType = {
    uuid: string
    facilityUuid: string
    description: string
    baseHourlyRate: number
    createdAt: Date
    updatedAt: Date
    startTime: Date
    endTime: Date
    workerSlots: number
    _count: ShiftCountAggregateOutputType | null
    _avg: ShiftAvgAggregateOutputType | null
    _sum: ShiftSumAggregateOutputType | null
    _min: ShiftMinAggregateOutputType | null
    _max: ShiftMaxAggregateOutputType | null
  }

  type GetShiftGroupByPayload<T extends ShiftGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ShiftGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShiftGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShiftGroupByOutputType[P]>
            : GetScalarType<T[P], ShiftGroupByOutputType[P]>
        }
      >
    >


  export type ShiftSelect = {
    uuid?: boolean
    facilityUuid?: boolean
    facility?: boolean | HealthCareFacilityArgs
    shiftAssignments?: boolean | ShiftAssignmentFindManyArgs
    description?: boolean
    baseHourlyRate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    startTime?: boolean
    endTime?: boolean
    workerSlots?: boolean
    blockedWorkers?: boolean | BlockedWorkerFindManyArgs
    _count?: boolean | ShiftCountOutputTypeArgs
  }

  export type ShiftInclude = {
    facility?: boolean | HealthCareFacilityArgs
    shiftAssignments?: boolean | ShiftAssignmentFindManyArgs
    blockedWorkers?: boolean | BlockedWorkerFindManyArgs
    _count?: boolean | ShiftCountOutputTypeArgs
  }

  export type ShiftGetPayload<
    S extends boolean | null | undefined | ShiftArgs,
    U = keyof S
      > = S extends true
        ? Shift
    : S extends undefined
    ? never
    : S extends ShiftArgs | ShiftFindManyArgs
    ?'include' extends U
    ? Shift  & {
    [P in TrueKeys<S['include']>]:
        P extends 'facility' ? HealthCareFacilityGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'shiftAssignments' ? Array < ShiftAssignmentGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'blockedWorkers' ? Array < BlockedWorkerGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? ShiftCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'facility' ? HealthCareFacilityGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'shiftAssignments' ? Array < ShiftAssignmentGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'blockedWorkers' ? Array < BlockedWorkerGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? ShiftCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Shift ? Shift[P] : never
  } 
    : Shift
  : Shift


  type ShiftCountArgs = Merge<
    Omit<ShiftFindManyArgs, 'select' | 'include'> & {
      select?: ShiftCountAggregateInputType | true
    }
  >

  export interface ShiftDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Shift that matches the filter.
     * @param {ShiftFindUniqueArgs} args - Arguments to find a Shift
     * @example
     * // Get one Shift
     * const shift = await prisma.shift.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ShiftFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ShiftFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Shift'> extends True ? CheckSelect<T, Prisma__ShiftClient<Shift>, Prisma__ShiftClient<ShiftGetPayload<T>>> : CheckSelect<T, Prisma__ShiftClient<Shift | null, null>, Prisma__ShiftClient<ShiftGetPayload<T> | null, null>>

    /**
     * Find the first Shift that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftFindFirstArgs} args - Arguments to find a Shift
     * @example
     * // Get one Shift
     * const shift = await prisma.shift.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ShiftFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ShiftFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Shift'> extends True ? CheckSelect<T, Prisma__ShiftClient<Shift>, Prisma__ShiftClient<ShiftGetPayload<T>>> : CheckSelect<T, Prisma__ShiftClient<Shift | null, null>, Prisma__ShiftClient<ShiftGetPayload<T> | null, null>>

    /**
     * Find zero or more Shifts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Shifts
     * const shifts = await prisma.shift.findMany()
     * 
     * // Get first 10 Shifts
     * const shifts = await prisma.shift.findMany({ take: 10 })
     * 
     * // Only select the `uuid`
     * const shiftWithUuidOnly = await prisma.shift.findMany({ select: { uuid: true } })
     * 
    **/
    findMany<T extends ShiftFindManyArgs>(
      args?: SelectSubset<T, ShiftFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Shift>>, PrismaPromise<Array<ShiftGetPayload<T>>>>

    /**
     * Create a Shift.
     * @param {ShiftCreateArgs} args - Arguments to create a Shift.
     * @example
     * // Create one Shift
     * const Shift = await prisma.shift.create({
     *   data: {
     *     // ... data to create a Shift
     *   }
     * })
     * 
    **/
    create<T extends ShiftCreateArgs>(
      args: SelectSubset<T, ShiftCreateArgs>
    ): CheckSelect<T, Prisma__ShiftClient<Shift>, Prisma__ShiftClient<ShiftGetPayload<T>>>

    /**
     * Create many Shifts.
     *     @param {ShiftCreateManyArgs} args - Arguments to create many Shifts.
     *     @example
     *     // Create many Shifts
     *     const shift = await prisma.shift.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ShiftCreateManyArgs>(
      args?: SelectSubset<T, ShiftCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Shift.
     * @param {ShiftDeleteArgs} args - Arguments to delete one Shift.
     * @example
     * // Delete one Shift
     * const Shift = await prisma.shift.delete({
     *   where: {
     *     // ... filter to delete one Shift
     *   }
     * })
     * 
    **/
    delete<T extends ShiftDeleteArgs>(
      args: SelectSubset<T, ShiftDeleteArgs>
    ): CheckSelect<T, Prisma__ShiftClient<Shift>, Prisma__ShiftClient<ShiftGetPayload<T>>>

    /**
     * Update one Shift.
     * @param {ShiftUpdateArgs} args - Arguments to update one Shift.
     * @example
     * // Update one Shift
     * const shift = await prisma.shift.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ShiftUpdateArgs>(
      args: SelectSubset<T, ShiftUpdateArgs>
    ): CheckSelect<T, Prisma__ShiftClient<Shift>, Prisma__ShiftClient<ShiftGetPayload<T>>>

    /**
     * Delete zero or more Shifts.
     * @param {ShiftDeleteManyArgs} args - Arguments to filter Shifts to delete.
     * @example
     * // Delete a few Shifts
     * const { count } = await prisma.shift.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ShiftDeleteManyArgs>(
      args?: SelectSubset<T, ShiftDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shifts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Shifts
     * const shift = await prisma.shift.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ShiftUpdateManyArgs>(
      args: SelectSubset<T, ShiftUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Shift.
     * @param {ShiftUpsertArgs} args - Arguments to update or create a Shift.
     * @example
     * // Update or create a Shift
     * const shift = await prisma.shift.upsert({
     *   create: {
     *     // ... data to create a Shift
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Shift we want to update
     *   }
     * })
    **/
    upsert<T extends ShiftUpsertArgs>(
      args: SelectSubset<T, ShiftUpsertArgs>
    ): CheckSelect<T, Prisma__ShiftClient<Shift>, Prisma__ShiftClient<ShiftGetPayload<T>>>

    /**
     * Find one Shift that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ShiftFindUniqueOrThrowArgs} args - Arguments to find a Shift
     * @example
     * // Get one Shift
     * const shift = await prisma.shift.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ShiftFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ShiftFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__ShiftClient<Shift>, Prisma__ShiftClient<ShiftGetPayload<T>>>

    /**
     * Find the first Shift that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftFindFirstOrThrowArgs} args - Arguments to find a Shift
     * @example
     * // Get one Shift
     * const shift = await prisma.shift.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ShiftFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ShiftFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__ShiftClient<Shift>, Prisma__ShiftClient<ShiftGetPayload<T>>>

    /**
     * Count the number of Shifts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftCountArgs} args - Arguments to filter Shifts to count.
     * @example
     * // Count the number of Shifts
     * const count = await prisma.shift.count({
     *   where: {
     *     // ... the filter for the Shifts we want to count
     *   }
     * })
    **/
    count<T extends ShiftCountArgs>(
      args?: Subset<T, ShiftCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShiftCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Shift.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShiftAggregateArgs>(args: Subset<T, ShiftAggregateArgs>): PrismaPromise<GetShiftAggregateType<T>>

    /**
     * Group by Shift.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShiftGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShiftGroupByArgs['orderBy'] }
        : { orderBy?: ShiftGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShiftGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShiftGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Shift.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ShiftClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    facility<T extends HealthCareFacilityArgs = {}>(args?: Subset<T, HealthCareFacilityArgs>): CheckSelect<T, Prisma__HealthCareFacilityClient<HealthCareFacility | Null>, Prisma__HealthCareFacilityClient<HealthCareFacilityGetPayload<T> | Null>>;

    shiftAssignments<T extends ShiftAssignmentFindManyArgs = {}>(args?: Subset<T, ShiftAssignmentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ShiftAssignment>| Null>, PrismaPromise<Array<ShiftAssignmentGetPayload<T>>| Null>>;

    blockedWorkers<T extends BlockedWorkerFindManyArgs = {}>(args?: Subset<T, BlockedWorkerFindManyArgs>): CheckSelect<T, PrismaPromise<Array<BlockedWorker>| Null>, PrismaPromise<Array<BlockedWorkerGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Shift base type for findUnique actions
   */
  export type ShiftFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Shift
     * 
    **/
    select?: ShiftSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShiftInclude | null
    /**
     * Filter, which Shift to fetch.
     * 
    **/
    where: ShiftWhereUniqueInput
  }

  /**
   * Shift: findUnique
   */
  export interface ShiftFindUniqueArgs extends ShiftFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Shift base type for findFirst actions
   */
  export type ShiftFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Shift
     * 
    **/
    select?: ShiftSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShiftInclude | null
    /**
     * Filter, which Shift to fetch.
     * 
    **/
    where?: ShiftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shifts to fetch.
     * 
    **/
    orderBy?: Enumerable<ShiftOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shifts.
     * 
    **/
    cursor?: ShiftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shifts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shifts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shifts.
     * 
    **/
    distinct?: Enumerable<ShiftScalarFieldEnum>
  }

  /**
   * Shift: findFirst
   */
  export interface ShiftFindFirstArgs extends ShiftFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Shift findMany
   */
  export type ShiftFindManyArgs = {
    /**
     * Select specific fields to fetch from the Shift
     * 
    **/
    select?: ShiftSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShiftInclude | null
    /**
     * Filter, which Shifts to fetch.
     * 
    **/
    where?: ShiftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shifts to fetch.
     * 
    **/
    orderBy?: Enumerable<ShiftOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Shifts.
     * 
    **/
    cursor?: ShiftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shifts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shifts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ShiftScalarFieldEnum>
  }


  /**
   * Shift create
   */
  export type ShiftCreateArgs = {
    /**
     * Select specific fields to fetch from the Shift
     * 
    **/
    select?: ShiftSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShiftInclude | null
    /**
     * The data needed to create a Shift.
     * 
    **/
    data: XOR<ShiftCreateInput, ShiftUncheckedCreateInput>
  }


  /**
   * Shift createMany
   */
  export type ShiftCreateManyArgs = {
    /**
     * The data used to create many Shifts.
     * 
    **/
    data: Enumerable<ShiftCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Shift update
   */
  export type ShiftUpdateArgs = {
    /**
     * Select specific fields to fetch from the Shift
     * 
    **/
    select?: ShiftSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShiftInclude | null
    /**
     * The data needed to update a Shift.
     * 
    **/
    data: XOR<ShiftUpdateInput, ShiftUncheckedUpdateInput>
    /**
     * Choose, which Shift to update.
     * 
    **/
    where: ShiftWhereUniqueInput
  }


  /**
   * Shift updateMany
   */
  export type ShiftUpdateManyArgs = {
    /**
     * The data used to update Shifts.
     * 
    **/
    data: XOR<ShiftUpdateManyMutationInput, ShiftUncheckedUpdateManyInput>
    /**
     * Filter which Shifts to update
     * 
    **/
    where?: ShiftWhereInput
  }


  /**
   * Shift upsert
   */
  export type ShiftUpsertArgs = {
    /**
     * Select specific fields to fetch from the Shift
     * 
    **/
    select?: ShiftSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShiftInclude | null
    /**
     * The filter to search for the Shift to update in case it exists.
     * 
    **/
    where: ShiftWhereUniqueInput
    /**
     * In case the Shift found by the `where` argument doesn't exist, create a new Shift with this data.
     * 
    **/
    create: XOR<ShiftCreateInput, ShiftUncheckedCreateInput>
    /**
     * In case the Shift was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ShiftUpdateInput, ShiftUncheckedUpdateInput>
  }


  /**
   * Shift delete
   */
  export type ShiftDeleteArgs = {
    /**
     * Select specific fields to fetch from the Shift
     * 
    **/
    select?: ShiftSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShiftInclude | null
    /**
     * Filter which Shift to delete.
     * 
    **/
    where: ShiftWhereUniqueInput
  }


  /**
   * Shift deleteMany
   */
  export type ShiftDeleteManyArgs = {
    /**
     * Filter which Shifts to delete
     * 
    **/
    where?: ShiftWhereInput
  }


  /**
   * Shift: findUniqueOrThrow
   */
  export type ShiftFindUniqueOrThrowArgs = ShiftFindUniqueArgsBase
      

  /**
   * Shift: findFirstOrThrow
   */
  export type ShiftFindFirstOrThrowArgs = ShiftFindFirstArgsBase
      

  /**
   * Shift without action
   */
  export type ShiftArgs = {
    /**
     * Select specific fields to fetch from the Shift
     * 
    **/
    select?: ShiftSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShiftInclude | null
  }



  /**
   * Model ShiftAssignment
   */


  export type AggregateShiftAssignment = {
    _count: ShiftAssignmentCountAggregateOutputType | null
    _avg: ShiftAssignmentAvgAggregateOutputType | null
    _sum: ShiftAssignmentSumAggregateOutputType | null
    _min: ShiftAssignmentMinAggregateOutputType | null
    _max: ShiftAssignmentMaxAggregateOutputType | null
  }

  export type ShiftAssignmentAvgAggregateOutputType = {
    rating: number | null
  }

  export type ShiftAssignmentSumAggregateOutputType = {
    rating: number | null
  }

  export type ShiftAssignmentMinAggregateOutputType = {
    shiftUuid: string | null
    workerUuid: string | null
    rating: number | null
  }

  export type ShiftAssignmentMaxAggregateOutputType = {
    shiftUuid: string | null
    workerUuid: string | null
    rating: number | null
  }

  export type ShiftAssignmentCountAggregateOutputType = {
    shiftUuid: number
    workerUuid: number
    rating: number
    _all: number
  }


  export type ShiftAssignmentAvgAggregateInputType = {
    rating?: true
  }

  export type ShiftAssignmentSumAggregateInputType = {
    rating?: true
  }

  export type ShiftAssignmentMinAggregateInputType = {
    shiftUuid?: true
    workerUuid?: true
    rating?: true
  }

  export type ShiftAssignmentMaxAggregateInputType = {
    shiftUuid?: true
    workerUuid?: true
    rating?: true
  }

  export type ShiftAssignmentCountAggregateInputType = {
    shiftUuid?: true
    workerUuid?: true
    rating?: true
    _all?: true
  }

  export type ShiftAssignmentAggregateArgs = {
    /**
     * Filter which ShiftAssignment to aggregate.
     * 
    **/
    where?: ShiftAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShiftAssignments to fetch.
     * 
    **/
    orderBy?: Enumerable<ShiftAssignmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ShiftAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShiftAssignments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShiftAssignments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShiftAssignments
    **/
    _count?: true | ShiftAssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShiftAssignmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShiftAssignmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShiftAssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShiftAssignmentMaxAggregateInputType
  }

  export type GetShiftAssignmentAggregateType<T extends ShiftAssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateShiftAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShiftAssignment[P]>
      : GetScalarType<T[P], AggregateShiftAssignment[P]>
  }




  export type ShiftAssignmentGroupByArgs = {
    where?: ShiftAssignmentWhereInput
    orderBy?: Enumerable<ShiftAssignmentOrderByWithAggregationInput>
    by: Array<ShiftAssignmentScalarFieldEnum>
    having?: ShiftAssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShiftAssignmentCountAggregateInputType | true
    _avg?: ShiftAssignmentAvgAggregateInputType
    _sum?: ShiftAssignmentSumAggregateInputType
    _min?: ShiftAssignmentMinAggregateInputType
    _max?: ShiftAssignmentMaxAggregateInputType
  }


  export type ShiftAssignmentGroupByOutputType = {
    shiftUuid: string
    workerUuid: string
    rating: number | null
    _count: ShiftAssignmentCountAggregateOutputType | null
    _avg: ShiftAssignmentAvgAggregateOutputType | null
    _sum: ShiftAssignmentSumAggregateOutputType | null
    _min: ShiftAssignmentMinAggregateOutputType | null
    _max: ShiftAssignmentMaxAggregateOutputType | null
  }

  type GetShiftAssignmentGroupByPayload<T extends ShiftAssignmentGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ShiftAssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShiftAssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShiftAssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], ShiftAssignmentGroupByOutputType[P]>
        }
      >
    >


  export type ShiftAssignmentSelect = {
    shiftUuid?: boolean
    workerUuid?: boolean
    shift?: boolean | ShiftArgs
    worker?: boolean | WorkerArgs
    rating?: boolean
  }

  export type ShiftAssignmentInclude = {
    shift?: boolean | ShiftArgs
    worker?: boolean | WorkerArgs
  }

  export type ShiftAssignmentGetPayload<
    S extends boolean | null | undefined | ShiftAssignmentArgs,
    U = keyof S
      > = S extends true
        ? ShiftAssignment
    : S extends undefined
    ? never
    : S extends ShiftAssignmentArgs | ShiftAssignmentFindManyArgs
    ?'include' extends U
    ? ShiftAssignment  & {
    [P in TrueKeys<S['include']>]:
        P extends 'shift' ? ShiftGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'worker' ? WorkerGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'shift' ? ShiftGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'worker' ? WorkerGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof ShiftAssignment ? ShiftAssignment[P] : never
  } 
    : ShiftAssignment
  : ShiftAssignment


  type ShiftAssignmentCountArgs = Merge<
    Omit<ShiftAssignmentFindManyArgs, 'select' | 'include'> & {
      select?: ShiftAssignmentCountAggregateInputType | true
    }
  >

  export interface ShiftAssignmentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one ShiftAssignment that matches the filter.
     * @param {ShiftAssignmentFindUniqueArgs} args - Arguments to find a ShiftAssignment
     * @example
     * // Get one ShiftAssignment
     * const shiftAssignment = await prisma.shiftAssignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ShiftAssignmentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ShiftAssignmentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ShiftAssignment'> extends True ? CheckSelect<T, Prisma__ShiftAssignmentClient<ShiftAssignment>, Prisma__ShiftAssignmentClient<ShiftAssignmentGetPayload<T>>> : CheckSelect<T, Prisma__ShiftAssignmentClient<ShiftAssignment | null, null>, Prisma__ShiftAssignmentClient<ShiftAssignmentGetPayload<T> | null, null>>

    /**
     * Find the first ShiftAssignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftAssignmentFindFirstArgs} args - Arguments to find a ShiftAssignment
     * @example
     * // Get one ShiftAssignment
     * const shiftAssignment = await prisma.shiftAssignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ShiftAssignmentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ShiftAssignmentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ShiftAssignment'> extends True ? CheckSelect<T, Prisma__ShiftAssignmentClient<ShiftAssignment>, Prisma__ShiftAssignmentClient<ShiftAssignmentGetPayload<T>>> : CheckSelect<T, Prisma__ShiftAssignmentClient<ShiftAssignment | null, null>, Prisma__ShiftAssignmentClient<ShiftAssignmentGetPayload<T> | null, null>>

    /**
     * Find zero or more ShiftAssignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftAssignmentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShiftAssignments
     * const shiftAssignments = await prisma.shiftAssignment.findMany()
     * 
     * // Get first 10 ShiftAssignments
     * const shiftAssignments = await prisma.shiftAssignment.findMany({ take: 10 })
     * 
     * // Only select the `shiftUuid`
     * const shiftAssignmentWithShiftUuidOnly = await prisma.shiftAssignment.findMany({ select: { shiftUuid: true } })
     * 
    **/
    findMany<T extends ShiftAssignmentFindManyArgs>(
      args?: SelectSubset<T, ShiftAssignmentFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ShiftAssignment>>, PrismaPromise<Array<ShiftAssignmentGetPayload<T>>>>

    /**
     * Create a ShiftAssignment.
     * @param {ShiftAssignmentCreateArgs} args - Arguments to create a ShiftAssignment.
     * @example
     * // Create one ShiftAssignment
     * const ShiftAssignment = await prisma.shiftAssignment.create({
     *   data: {
     *     // ... data to create a ShiftAssignment
     *   }
     * })
     * 
    **/
    create<T extends ShiftAssignmentCreateArgs>(
      args: SelectSubset<T, ShiftAssignmentCreateArgs>
    ): CheckSelect<T, Prisma__ShiftAssignmentClient<ShiftAssignment>, Prisma__ShiftAssignmentClient<ShiftAssignmentGetPayload<T>>>

    /**
     * Create many ShiftAssignments.
     *     @param {ShiftAssignmentCreateManyArgs} args - Arguments to create many ShiftAssignments.
     *     @example
     *     // Create many ShiftAssignments
     *     const shiftAssignment = await prisma.shiftAssignment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ShiftAssignmentCreateManyArgs>(
      args?: SelectSubset<T, ShiftAssignmentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ShiftAssignment.
     * @param {ShiftAssignmentDeleteArgs} args - Arguments to delete one ShiftAssignment.
     * @example
     * // Delete one ShiftAssignment
     * const ShiftAssignment = await prisma.shiftAssignment.delete({
     *   where: {
     *     // ... filter to delete one ShiftAssignment
     *   }
     * })
     * 
    **/
    delete<T extends ShiftAssignmentDeleteArgs>(
      args: SelectSubset<T, ShiftAssignmentDeleteArgs>
    ): CheckSelect<T, Prisma__ShiftAssignmentClient<ShiftAssignment>, Prisma__ShiftAssignmentClient<ShiftAssignmentGetPayload<T>>>

    /**
     * Update one ShiftAssignment.
     * @param {ShiftAssignmentUpdateArgs} args - Arguments to update one ShiftAssignment.
     * @example
     * // Update one ShiftAssignment
     * const shiftAssignment = await prisma.shiftAssignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ShiftAssignmentUpdateArgs>(
      args: SelectSubset<T, ShiftAssignmentUpdateArgs>
    ): CheckSelect<T, Prisma__ShiftAssignmentClient<ShiftAssignment>, Prisma__ShiftAssignmentClient<ShiftAssignmentGetPayload<T>>>

    /**
     * Delete zero or more ShiftAssignments.
     * @param {ShiftAssignmentDeleteManyArgs} args - Arguments to filter ShiftAssignments to delete.
     * @example
     * // Delete a few ShiftAssignments
     * const { count } = await prisma.shiftAssignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ShiftAssignmentDeleteManyArgs>(
      args?: SelectSubset<T, ShiftAssignmentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShiftAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftAssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShiftAssignments
     * const shiftAssignment = await prisma.shiftAssignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ShiftAssignmentUpdateManyArgs>(
      args: SelectSubset<T, ShiftAssignmentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ShiftAssignment.
     * @param {ShiftAssignmentUpsertArgs} args - Arguments to update or create a ShiftAssignment.
     * @example
     * // Update or create a ShiftAssignment
     * const shiftAssignment = await prisma.shiftAssignment.upsert({
     *   create: {
     *     // ... data to create a ShiftAssignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShiftAssignment we want to update
     *   }
     * })
    **/
    upsert<T extends ShiftAssignmentUpsertArgs>(
      args: SelectSubset<T, ShiftAssignmentUpsertArgs>
    ): CheckSelect<T, Prisma__ShiftAssignmentClient<ShiftAssignment>, Prisma__ShiftAssignmentClient<ShiftAssignmentGetPayload<T>>>

    /**
     * Find one ShiftAssignment that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ShiftAssignmentFindUniqueOrThrowArgs} args - Arguments to find a ShiftAssignment
     * @example
     * // Get one ShiftAssignment
     * const shiftAssignment = await prisma.shiftAssignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ShiftAssignmentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ShiftAssignmentFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__ShiftAssignmentClient<ShiftAssignment>, Prisma__ShiftAssignmentClient<ShiftAssignmentGetPayload<T>>>

    /**
     * Find the first ShiftAssignment that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftAssignmentFindFirstOrThrowArgs} args - Arguments to find a ShiftAssignment
     * @example
     * // Get one ShiftAssignment
     * const shiftAssignment = await prisma.shiftAssignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ShiftAssignmentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ShiftAssignmentFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__ShiftAssignmentClient<ShiftAssignment>, Prisma__ShiftAssignmentClient<ShiftAssignmentGetPayload<T>>>

    /**
     * Count the number of ShiftAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftAssignmentCountArgs} args - Arguments to filter ShiftAssignments to count.
     * @example
     * // Count the number of ShiftAssignments
     * const count = await prisma.shiftAssignment.count({
     *   where: {
     *     // ... the filter for the ShiftAssignments we want to count
     *   }
     * })
    **/
    count<T extends ShiftAssignmentCountArgs>(
      args?: Subset<T, ShiftAssignmentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShiftAssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShiftAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftAssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShiftAssignmentAggregateArgs>(args: Subset<T, ShiftAssignmentAggregateArgs>): PrismaPromise<GetShiftAssignmentAggregateType<T>>

    /**
     * Group by ShiftAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftAssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShiftAssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShiftAssignmentGroupByArgs['orderBy'] }
        : { orderBy?: ShiftAssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShiftAssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShiftAssignmentGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ShiftAssignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ShiftAssignmentClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    shift<T extends ShiftArgs = {}>(args?: Subset<T, ShiftArgs>): CheckSelect<T, Prisma__ShiftClient<Shift | Null>, Prisma__ShiftClient<ShiftGetPayload<T> | Null>>;

    worker<T extends WorkerArgs = {}>(args?: Subset<T, WorkerArgs>): CheckSelect<T, Prisma__WorkerClient<Worker | Null>, Prisma__WorkerClient<WorkerGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ShiftAssignment base type for findUnique actions
   */
  export type ShiftAssignmentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ShiftAssignment
     * 
    **/
    select?: ShiftAssignmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShiftAssignmentInclude | null
    /**
     * Filter, which ShiftAssignment to fetch.
     * 
    **/
    where: ShiftAssignmentWhereUniqueInput
  }

  /**
   * ShiftAssignment: findUnique
   */
  export interface ShiftAssignmentFindUniqueArgs extends ShiftAssignmentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ShiftAssignment base type for findFirst actions
   */
  export type ShiftAssignmentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ShiftAssignment
     * 
    **/
    select?: ShiftAssignmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShiftAssignmentInclude | null
    /**
     * Filter, which ShiftAssignment to fetch.
     * 
    **/
    where?: ShiftAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShiftAssignments to fetch.
     * 
    **/
    orderBy?: Enumerable<ShiftAssignmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShiftAssignments.
     * 
    **/
    cursor?: ShiftAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShiftAssignments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShiftAssignments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShiftAssignments.
     * 
    **/
    distinct?: Enumerable<ShiftAssignmentScalarFieldEnum>
  }

  /**
   * ShiftAssignment: findFirst
   */
  export interface ShiftAssignmentFindFirstArgs extends ShiftAssignmentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ShiftAssignment findMany
   */
  export type ShiftAssignmentFindManyArgs = {
    /**
     * Select specific fields to fetch from the ShiftAssignment
     * 
    **/
    select?: ShiftAssignmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShiftAssignmentInclude | null
    /**
     * Filter, which ShiftAssignments to fetch.
     * 
    **/
    where?: ShiftAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShiftAssignments to fetch.
     * 
    **/
    orderBy?: Enumerable<ShiftAssignmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShiftAssignments.
     * 
    **/
    cursor?: ShiftAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShiftAssignments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShiftAssignments.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ShiftAssignmentScalarFieldEnum>
  }


  /**
   * ShiftAssignment create
   */
  export type ShiftAssignmentCreateArgs = {
    /**
     * Select specific fields to fetch from the ShiftAssignment
     * 
    **/
    select?: ShiftAssignmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShiftAssignmentInclude | null
    /**
     * The data needed to create a ShiftAssignment.
     * 
    **/
    data: XOR<ShiftAssignmentCreateInput, ShiftAssignmentUncheckedCreateInput>
  }


  /**
   * ShiftAssignment createMany
   */
  export type ShiftAssignmentCreateManyArgs = {
    /**
     * The data used to create many ShiftAssignments.
     * 
    **/
    data: Enumerable<ShiftAssignmentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ShiftAssignment update
   */
  export type ShiftAssignmentUpdateArgs = {
    /**
     * Select specific fields to fetch from the ShiftAssignment
     * 
    **/
    select?: ShiftAssignmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShiftAssignmentInclude | null
    /**
     * The data needed to update a ShiftAssignment.
     * 
    **/
    data: XOR<ShiftAssignmentUpdateInput, ShiftAssignmentUncheckedUpdateInput>
    /**
     * Choose, which ShiftAssignment to update.
     * 
    **/
    where: ShiftAssignmentWhereUniqueInput
  }


  /**
   * ShiftAssignment updateMany
   */
  export type ShiftAssignmentUpdateManyArgs = {
    /**
     * The data used to update ShiftAssignments.
     * 
    **/
    data: XOR<ShiftAssignmentUpdateManyMutationInput, ShiftAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which ShiftAssignments to update
     * 
    **/
    where?: ShiftAssignmentWhereInput
  }


  /**
   * ShiftAssignment upsert
   */
  export type ShiftAssignmentUpsertArgs = {
    /**
     * Select specific fields to fetch from the ShiftAssignment
     * 
    **/
    select?: ShiftAssignmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShiftAssignmentInclude | null
    /**
     * The filter to search for the ShiftAssignment to update in case it exists.
     * 
    **/
    where: ShiftAssignmentWhereUniqueInput
    /**
     * In case the ShiftAssignment found by the `where` argument doesn't exist, create a new ShiftAssignment with this data.
     * 
    **/
    create: XOR<ShiftAssignmentCreateInput, ShiftAssignmentUncheckedCreateInput>
    /**
     * In case the ShiftAssignment was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ShiftAssignmentUpdateInput, ShiftAssignmentUncheckedUpdateInput>
  }


  /**
   * ShiftAssignment delete
   */
  export type ShiftAssignmentDeleteArgs = {
    /**
     * Select specific fields to fetch from the ShiftAssignment
     * 
    **/
    select?: ShiftAssignmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShiftAssignmentInclude | null
    /**
     * Filter which ShiftAssignment to delete.
     * 
    **/
    where: ShiftAssignmentWhereUniqueInput
  }


  /**
   * ShiftAssignment deleteMany
   */
  export type ShiftAssignmentDeleteManyArgs = {
    /**
     * Filter which ShiftAssignments to delete
     * 
    **/
    where?: ShiftAssignmentWhereInput
  }


  /**
   * ShiftAssignment: findUniqueOrThrow
   */
  export type ShiftAssignmentFindUniqueOrThrowArgs = ShiftAssignmentFindUniqueArgsBase
      

  /**
   * ShiftAssignment: findFirstOrThrow
   */
  export type ShiftAssignmentFindFirstOrThrowArgs = ShiftAssignmentFindFirstArgsBase
      

  /**
   * ShiftAssignment without action
   */
  export type ShiftAssignmentArgs = {
    /**
     * Select specific fields to fetch from the ShiftAssignment
     * 
    **/
    select?: ShiftAssignmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShiftAssignmentInclude | null
  }



  /**
   * Model BlockedWorker
   */


  export type AggregateBlockedWorker = {
    _count: BlockedWorkerCountAggregateOutputType | null
    _min: BlockedWorkerMinAggregateOutputType | null
    _max: BlockedWorkerMaxAggregateOutputType | null
  }

  export type BlockedWorkerMinAggregateOutputType = {
    shiftUuid: string | null
    workerUuid: string | null
    facilityUuid: string | null
    createdAt: Date | null
    blockReason: string | null
  }

  export type BlockedWorkerMaxAggregateOutputType = {
    shiftUuid: string | null
    workerUuid: string | null
    facilityUuid: string | null
    createdAt: Date | null
    blockReason: string | null
  }

  export type BlockedWorkerCountAggregateOutputType = {
    shiftUuid: number
    workerUuid: number
    facilityUuid: number
    createdAt: number
    blockReason: number
    _all: number
  }


  export type BlockedWorkerMinAggregateInputType = {
    shiftUuid?: true
    workerUuid?: true
    facilityUuid?: true
    createdAt?: true
    blockReason?: true
  }

  export type BlockedWorkerMaxAggregateInputType = {
    shiftUuid?: true
    workerUuid?: true
    facilityUuid?: true
    createdAt?: true
    blockReason?: true
  }

  export type BlockedWorkerCountAggregateInputType = {
    shiftUuid?: true
    workerUuid?: true
    facilityUuid?: true
    createdAt?: true
    blockReason?: true
    _all?: true
  }

  export type BlockedWorkerAggregateArgs = {
    /**
     * Filter which BlockedWorker to aggregate.
     * 
    **/
    where?: BlockedWorkerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlockedWorkers to fetch.
     * 
    **/
    orderBy?: Enumerable<BlockedWorkerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: BlockedWorkerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlockedWorkers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlockedWorkers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BlockedWorkers
    **/
    _count?: true | BlockedWorkerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BlockedWorkerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BlockedWorkerMaxAggregateInputType
  }

  export type GetBlockedWorkerAggregateType<T extends BlockedWorkerAggregateArgs> = {
        [P in keyof T & keyof AggregateBlockedWorker]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBlockedWorker[P]>
      : GetScalarType<T[P], AggregateBlockedWorker[P]>
  }




  export type BlockedWorkerGroupByArgs = {
    where?: BlockedWorkerWhereInput
    orderBy?: Enumerable<BlockedWorkerOrderByWithAggregationInput>
    by: Array<BlockedWorkerScalarFieldEnum>
    having?: BlockedWorkerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BlockedWorkerCountAggregateInputType | true
    _min?: BlockedWorkerMinAggregateInputType
    _max?: BlockedWorkerMaxAggregateInputType
  }


  export type BlockedWorkerGroupByOutputType = {
    shiftUuid: string
    workerUuid: string
    facilityUuid: string
    createdAt: Date
    blockReason: string
    _count: BlockedWorkerCountAggregateOutputType | null
    _min: BlockedWorkerMinAggregateOutputType | null
    _max: BlockedWorkerMaxAggregateOutputType | null
  }

  type GetBlockedWorkerGroupByPayload<T extends BlockedWorkerGroupByArgs> = PrismaPromise<
    Array<
      PickArray<BlockedWorkerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BlockedWorkerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BlockedWorkerGroupByOutputType[P]>
            : GetScalarType<T[P], BlockedWorkerGroupByOutputType[P]>
        }
      >
    >


  export type BlockedWorkerSelect = {
    shiftUuid?: boolean
    workerUuid?: boolean
    facilityUuid?: boolean
    shift?: boolean | ShiftArgs
    worker?: boolean | WorkerArgs
    facility?: boolean | HealthCareFacilityArgs
    createdAt?: boolean
    blockReason?: boolean
  }

  export type BlockedWorkerInclude = {
    shift?: boolean | ShiftArgs
    worker?: boolean | WorkerArgs
    facility?: boolean | HealthCareFacilityArgs
  }

  export type BlockedWorkerGetPayload<
    S extends boolean | null | undefined | BlockedWorkerArgs,
    U = keyof S
      > = S extends true
        ? BlockedWorker
    : S extends undefined
    ? never
    : S extends BlockedWorkerArgs | BlockedWorkerFindManyArgs
    ?'include' extends U
    ? BlockedWorker  & {
    [P in TrueKeys<S['include']>]:
        P extends 'shift' ? ShiftGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'worker' ? WorkerGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'facility' ? HealthCareFacilityGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'shift' ? ShiftGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'worker' ? WorkerGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'facility' ? HealthCareFacilityGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof BlockedWorker ? BlockedWorker[P] : never
  } 
    : BlockedWorker
  : BlockedWorker


  type BlockedWorkerCountArgs = Merge<
    Omit<BlockedWorkerFindManyArgs, 'select' | 'include'> & {
      select?: BlockedWorkerCountAggregateInputType | true
    }
  >

  export interface BlockedWorkerDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one BlockedWorker that matches the filter.
     * @param {BlockedWorkerFindUniqueArgs} args - Arguments to find a BlockedWorker
     * @example
     * // Get one BlockedWorker
     * const blockedWorker = await prisma.blockedWorker.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BlockedWorkerFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BlockedWorkerFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'BlockedWorker'> extends True ? CheckSelect<T, Prisma__BlockedWorkerClient<BlockedWorker>, Prisma__BlockedWorkerClient<BlockedWorkerGetPayload<T>>> : CheckSelect<T, Prisma__BlockedWorkerClient<BlockedWorker | null, null>, Prisma__BlockedWorkerClient<BlockedWorkerGetPayload<T> | null, null>>

    /**
     * Find the first BlockedWorker that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockedWorkerFindFirstArgs} args - Arguments to find a BlockedWorker
     * @example
     * // Get one BlockedWorker
     * const blockedWorker = await prisma.blockedWorker.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BlockedWorkerFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BlockedWorkerFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'BlockedWorker'> extends True ? CheckSelect<T, Prisma__BlockedWorkerClient<BlockedWorker>, Prisma__BlockedWorkerClient<BlockedWorkerGetPayload<T>>> : CheckSelect<T, Prisma__BlockedWorkerClient<BlockedWorker | null, null>, Prisma__BlockedWorkerClient<BlockedWorkerGetPayload<T> | null, null>>

    /**
     * Find zero or more BlockedWorkers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockedWorkerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BlockedWorkers
     * const blockedWorkers = await prisma.blockedWorker.findMany()
     * 
     * // Get first 10 BlockedWorkers
     * const blockedWorkers = await prisma.blockedWorker.findMany({ take: 10 })
     * 
     * // Only select the `shiftUuid`
     * const blockedWorkerWithShiftUuidOnly = await prisma.blockedWorker.findMany({ select: { shiftUuid: true } })
     * 
    **/
    findMany<T extends BlockedWorkerFindManyArgs>(
      args?: SelectSubset<T, BlockedWorkerFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<BlockedWorker>>, PrismaPromise<Array<BlockedWorkerGetPayload<T>>>>

    /**
     * Create a BlockedWorker.
     * @param {BlockedWorkerCreateArgs} args - Arguments to create a BlockedWorker.
     * @example
     * // Create one BlockedWorker
     * const BlockedWorker = await prisma.blockedWorker.create({
     *   data: {
     *     // ... data to create a BlockedWorker
     *   }
     * })
     * 
    **/
    create<T extends BlockedWorkerCreateArgs>(
      args: SelectSubset<T, BlockedWorkerCreateArgs>
    ): CheckSelect<T, Prisma__BlockedWorkerClient<BlockedWorker>, Prisma__BlockedWorkerClient<BlockedWorkerGetPayload<T>>>

    /**
     * Create many BlockedWorkers.
     *     @param {BlockedWorkerCreateManyArgs} args - Arguments to create many BlockedWorkers.
     *     @example
     *     // Create many BlockedWorkers
     *     const blockedWorker = await prisma.blockedWorker.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BlockedWorkerCreateManyArgs>(
      args?: SelectSubset<T, BlockedWorkerCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a BlockedWorker.
     * @param {BlockedWorkerDeleteArgs} args - Arguments to delete one BlockedWorker.
     * @example
     * // Delete one BlockedWorker
     * const BlockedWorker = await prisma.blockedWorker.delete({
     *   where: {
     *     // ... filter to delete one BlockedWorker
     *   }
     * })
     * 
    **/
    delete<T extends BlockedWorkerDeleteArgs>(
      args: SelectSubset<T, BlockedWorkerDeleteArgs>
    ): CheckSelect<T, Prisma__BlockedWorkerClient<BlockedWorker>, Prisma__BlockedWorkerClient<BlockedWorkerGetPayload<T>>>

    /**
     * Update one BlockedWorker.
     * @param {BlockedWorkerUpdateArgs} args - Arguments to update one BlockedWorker.
     * @example
     * // Update one BlockedWorker
     * const blockedWorker = await prisma.blockedWorker.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BlockedWorkerUpdateArgs>(
      args: SelectSubset<T, BlockedWorkerUpdateArgs>
    ): CheckSelect<T, Prisma__BlockedWorkerClient<BlockedWorker>, Prisma__BlockedWorkerClient<BlockedWorkerGetPayload<T>>>

    /**
     * Delete zero or more BlockedWorkers.
     * @param {BlockedWorkerDeleteManyArgs} args - Arguments to filter BlockedWorkers to delete.
     * @example
     * // Delete a few BlockedWorkers
     * const { count } = await prisma.blockedWorker.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BlockedWorkerDeleteManyArgs>(
      args?: SelectSubset<T, BlockedWorkerDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more BlockedWorkers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockedWorkerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BlockedWorkers
     * const blockedWorker = await prisma.blockedWorker.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BlockedWorkerUpdateManyArgs>(
      args: SelectSubset<T, BlockedWorkerUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one BlockedWorker.
     * @param {BlockedWorkerUpsertArgs} args - Arguments to update or create a BlockedWorker.
     * @example
     * // Update or create a BlockedWorker
     * const blockedWorker = await prisma.blockedWorker.upsert({
     *   create: {
     *     // ... data to create a BlockedWorker
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BlockedWorker we want to update
     *   }
     * })
    **/
    upsert<T extends BlockedWorkerUpsertArgs>(
      args: SelectSubset<T, BlockedWorkerUpsertArgs>
    ): CheckSelect<T, Prisma__BlockedWorkerClient<BlockedWorker>, Prisma__BlockedWorkerClient<BlockedWorkerGetPayload<T>>>

    /**
     * Find one BlockedWorker that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {BlockedWorkerFindUniqueOrThrowArgs} args - Arguments to find a BlockedWorker
     * @example
     * // Get one BlockedWorker
     * const blockedWorker = await prisma.blockedWorker.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BlockedWorkerFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BlockedWorkerFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__BlockedWorkerClient<BlockedWorker>, Prisma__BlockedWorkerClient<BlockedWorkerGetPayload<T>>>

    /**
     * Find the first BlockedWorker that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockedWorkerFindFirstOrThrowArgs} args - Arguments to find a BlockedWorker
     * @example
     * // Get one BlockedWorker
     * const blockedWorker = await prisma.blockedWorker.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BlockedWorkerFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BlockedWorkerFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__BlockedWorkerClient<BlockedWorker>, Prisma__BlockedWorkerClient<BlockedWorkerGetPayload<T>>>

    /**
     * Count the number of BlockedWorkers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockedWorkerCountArgs} args - Arguments to filter BlockedWorkers to count.
     * @example
     * // Count the number of BlockedWorkers
     * const count = await prisma.blockedWorker.count({
     *   where: {
     *     // ... the filter for the BlockedWorkers we want to count
     *   }
     * })
    **/
    count<T extends BlockedWorkerCountArgs>(
      args?: Subset<T, BlockedWorkerCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BlockedWorkerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BlockedWorker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockedWorkerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BlockedWorkerAggregateArgs>(args: Subset<T, BlockedWorkerAggregateArgs>): PrismaPromise<GetBlockedWorkerAggregateType<T>>

    /**
     * Group by BlockedWorker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockedWorkerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BlockedWorkerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BlockedWorkerGroupByArgs['orderBy'] }
        : { orderBy?: BlockedWorkerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BlockedWorkerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBlockedWorkerGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for BlockedWorker.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BlockedWorkerClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    shift<T extends ShiftArgs = {}>(args?: Subset<T, ShiftArgs>): CheckSelect<T, Prisma__ShiftClient<Shift | Null>, Prisma__ShiftClient<ShiftGetPayload<T> | Null>>;

    worker<T extends WorkerArgs = {}>(args?: Subset<T, WorkerArgs>): CheckSelect<T, Prisma__WorkerClient<Worker | Null>, Prisma__WorkerClient<WorkerGetPayload<T> | Null>>;

    facility<T extends HealthCareFacilityArgs = {}>(args?: Subset<T, HealthCareFacilityArgs>): CheckSelect<T, Prisma__HealthCareFacilityClient<HealthCareFacility | Null>, Prisma__HealthCareFacilityClient<HealthCareFacilityGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * BlockedWorker base type for findUnique actions
   */
  export type BlockedWorkerFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the BlockedWorker
     * 
    **/
    select?: BlockedWorkerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BlockedWorkerInclude | null
    /**
     * Filter, which BlockedWorker to fetch.
     * 
    **/
    where: BlockedWorkerWhereUniqueInput
  }

  /**
   * BlockedWorker: findUnique
   */
  export interface BlockedWorkerFindUniqueArgs extends BlockedWorkerFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BlockedWorker base type for findFirst actions
   */
  export type BlockedWorkerFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the BlockedWorker
     * 
    **/
    select?: BlockedWorkerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BlockedWorkerInclude | null
    /**
     * Filter, which BlockedWorker to fetch.
     * 
    **/
    where?: BlockedWorkerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlockedWorkers to fetch.
     * 
    **/
    orderBy?: Enumerable<BlockedWorkerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BlockedWorkers.
     * 
    **/
    cursor?: BlockedWorkerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlockedWorkers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlockedWorkers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BlockedWorkers.
     * 
    **/
    distinct?: Enumerable<BlockedWorkerScalarFieldEnum>
  }

  /**
   * BlockedWorker: findFirst
   */
  export interface BlockedWorkerFindFirstArgs extends BlockedWorkerFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BlockedWorker findMany
   */
  export type BlockedWorkerFindManyArgs = {
    /**
     * Select specific fields to fetch from the BlockedWorker
     * 
    **/
    select?: BlockedWorkerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BlockedWorkerInclude | null
    /**
     * Filter, which BlockedWorkers to fetch.
     * 
    **/
    where?: BlockedWorkerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlockedWorkers to fetch.
     * 
    **/
    orderBy?: Enumerable<BlockedWorkerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BlockedWorkers.
     * 
    **/
    cursor?: BlockedWorkerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlockedWorkers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlockedWorkers.
     * 
    **/
    skip?: number
    distinct?: Enumerable<BlockedWorkerScalarFieldEnum>
  }


  /**
   * BlockedWorker create
   */
  export type BlockedWorkerCreateArgs = {
    /**
     * Select specific fields to fetch from the BlockedWorker
     * 
    **/
    select?: BlockedWorkerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BlockedWorkerInclude | null
    /**
     * The data needed to create a BlockedWorker.
     * 
    **/
    data: XOR<BlockedWorkerCreateInput, BlockedWorkerUncheckedCreateInput>
  }


  /**
   * BlockedWorker createMany
   */
  export type BlockedWorkerCreateManyArgs = {
    /**
     * The data used to create many BlockedWorkers.
     * 
    **/
    data: Enumerable<BlockedWorkerCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * BlockedWorker update
   */
  export type BlockedWorkerUpdateArgs = {
    /**
     * Select specific fields to fetch from the BlockedWorker
     * 
    **/
    select?: BlockedWorkerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BlockedWorkerInclude | null
    /**
     * The data needed to update a BlockedWorker.
     * 
    **/
    data: XOR<BlockedWorkerUpdateInput, BlockedWorkerUncheckedUpdateInput>
    /**
     * Choose, which BlockedWorker to update.
     * 
    **/
    where: BlockedWorkerWhereUniqueInput
  }


  /**
   * BlockedWorker updateMany
   */
  export type BlockedWorkerUpdateManyArgs = {
    /**
     * The data used to update BlockedWorkers.
     * 
    **/
    data: XOR<BlockedWorkerUpdateManyMutationInput, BlockedWorkerUncheckedUpdateManyInput>
    /**
     * Filter which BlockedWorkers to update
     * 
    **/
    where?: BlockedWorkerWhereInput
  }


  /**
   * BlockedWorker upsert
   */
  export type BlockedWorkerUpsertArgs = {
    /**
     * Select specific fields to fetch from the BlockedWorker
     * 
    **/
    select?: BlockedWorkerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BlockedWorkerInclude | null
    /**
     * The filter to search for the BlockedWorker to update in case it exists.
     * 
    **/
    where: BlockedWorkerWhereUniqueInput
    /**
     * In case the BlockedWorker found by the `where` argument doesn't exist, create a new BlockedWorker with this data.
     * 
    **/
    create: XOR<BlockedWorkerCreateInput, BlockedWorkerUncheckedCreateInput>
    /**
     * In case the BlockedWorker was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<BlockedWorkerUpdateInput, BlockedWorkerUncheckedUpdateInput>
  }


  /**
   * BlockedWorker delete
   */
  export type BlockedWorkerDeleteArgs = {
    /**
     * Select specific fields to fetch from the BlockedWorker
     * 
    **/
    select?: BlockedWorkerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BlockedWorkerInclude | null
    /**
     * Filter which BlockedWorker to delete.
     * 
    **/
    where: BlockedWorkerWhereUniqueInput
  }


  /**
   * BlockedWorker deleteMany
   */
  export type BlockedWorkerDeleteManyArgs = {
    /**
     * Filter which BlockedWorkers to delete
     * 
    **/
    where?: BlockedWorkerWhereInput
  }


  /**
   * BlockedWorker: findUniqueOrThrow
   */
  export type BlockedWorkerFindUniqueOrThrowArgs = BlockedWorkerFindUniqueArgsBase
      

  /**
   * BlockedWorker: findFirstOrThrow
   */
  export type BlockedWorkerFindFirstOrThrowArgs = BlockedWorkerFindFirstArgsBase
      

  /**
   * BlockedWorker without action
   */
  export type BlockedWorkerArgs = {
    /**
     * Select specific fields to fetch from the BlockedWorker
     * 
    **/
    select?: BlockedWorkerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BlockedWorkerInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const BlockedWorkerScalarFieldEnum: {
    shiftUuid: 'shiftUuid',
    workerUuid: 'workerUuid',
    facilityUuid: 'facilityUuid',
    createdAt: 'createdAt',
    blockReason: 'blockReason'
  };

  export type BlockedWorkerScalarFieldEnum = (typeof BlockedWorkerScalarFieldEnum)[keyof typeof BlockedWorkerScalarFieldEnum]


  export const HealthCareFacilityScalarFieldEnum: {
    uuid: 'uuid',
    name: 'name'
  };

  export type HealthCareFacilityScalarFieldEnum = (typeof HealthCareFacilityScalarFieldEnum)[keyof typeof HealthCareFacilityScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const ShiftAssignmentScalarFieldEnum: {
    shiftUuid: 'shiftUuid',
    workerUuid: 'workerUuid',
    rating: 'rating'
  };

  export type ShiftAssignmentScalarFieldEnum = (typeof ShiftAssignmentScalarFieldEnum)[keyof typeof ShiftAssignmentScalarFieldEnum]


  export const ShiftScalarFieldEnum: {
    uuid: 'uuid',
    facilityUuid: 'facilityUuid',
    description: 'description',
    baseHourlyRate: 'baseHourlyRate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    startTime: 'startTime',
    endTime: 'endTime',
    workerSlots: 'workerSlots'
  };

  export type ShiftScalarFieldEnum = (typeof ShiftScalarFieldEnum)[keyof typeof ShiftScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const WorkerScalarFieldEnum: {
    uuid: 'uuid',
    firstName: 'firstName',
    lastName: 'lastName'
  };

  export type WorkerScalarFieldEnum = (typeof WorkerScalarFieldEnum)[keyof typeof WorkerScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type HealthCareFacilityWhereInput = {
    AND?: Enumerable<HealthCareFacilityWhereInput>
    OR?: Enumerable<HealthCareFacilityWhereInput>
    NOT?: Enumerable<HealthCareFacilityWhereInput>
    uuid?: StringFilter | string
    shifts?: ShiftListRelationFilter
    name?: StringFilter | string
    blockedWorkers?: BlockedWorkerListRelationFilter
  }

  export type HealthCareFacilityOrderByWithRelationInput = {
    uuid?: SortOrder
    shifts?: ShiftOrderByRelationAggregateInput
    name?: SortOrder
    blockedWorkers?: BlockedWorkerOrderByRelationAggregateInput
  }

  export type HealthCareFacilityWhereUniqueInput = {
    uuid?: string
  }

  export type HealthCareFacilityOrderByWithAggregationInput = {
    uuid?: SortOrder
    name?: SortOrder
    _count?: HealthCareFacilityCountOrderByAggregateInput
    _max?: HealthCareFacilityMaxOrderByAggregateInput
    _min?: HealthCareFacilityMinOrderByAggregateInput
  }

  export type HealthCareFacilityScalarWhereWithAggregatesInput = {
    AND?: Enumerable<HealthCareFacilityScalarWhereWithAggregatesInput>
    OR?: Enumerable<HealthCareFacilityScalarWhereWithAggregatesInput>
    NOT?: Enumerable<HealthCareFacilityScalarWhereWithAggregatesInput>
    uuid?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
  }

  export type WorkerWhereInput = {
    AND?: Enumerable<WorkerWhereInput>
    OR?: Enumerable<WorkerWhereInput>
    NOT?: Enumerable<WorkerWhereInput>
    uuid?: StringFilter | string
    shiftAssignments?: ShiftAssignmentListRelationFilter
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    blockedAtFacilities?: BlockedWorkerListRelationFilter
  }

  export type WorkerOrderByWithRelationInput = {
    uuid?: SortOrder
    shiftAssignments?: ShiftAssignmentOrderByRelationAggregateInput
    firstName?: SortOrder
    lastName?: SortOrder
    blockedAtFacilities?: BlockedWorkerOrderByRelationAggregateInput
  }

  export type WorkerWhereUniqueInput = {
    uuid?: string
  }

  export type WorkerOrderByWithAggregationInput = {
    uuid?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    _count?: WorkerCountOrderByAggregateInput
    _max?: WorkerMaxOrderByAggregateInput
    _min?: WorkerMinOrderByAggregateInput
  }

  export type WorkerScalarWhereWithAggregatesInput = {
    AND?: Enumerable<WorkerScalarWhereWithAggregatesInput>
    OR?: Enumerable<WorkerScalarWhereWithAggregatesInput>
    NOT?: Enumerable<WorkerScalarWhereWithAggregatesInput>
    uuid?: StringWithAggregatesFilter | string
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
  }

  export type ShiftWhereInput = {
    AND?: Enumerable<ShiftWhereInput>
    OR?: Enumerable<ShiftWhereInput>
    NOT?: Enumerable<ShiftWhereInput>
    uuid?: StringFilter | string
    facilityUuid?: StringFilter | string
    facility?: XOR<HealthCareFacilityRelationFilter, HealthCareFacilityWhereInput>
    shiftAssignments?: ShiftAssignmentListRelationFilter
    description?: StringFilter | string
    baseHourlyRate?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    startTime?: DateTimeFilter | Date | string
    endTime?: DateTimeFilter | Date | string
    workerSlots?: IntFilter | number
    blockedWorkers?: BlockedWorkerListRelationFilter
  }

  export type ShiftOrderByWithRelationInput = {
    uuid?: SortOrder
    facilityUuid?: SortOrder
    facility?: HealthCareFacilityOrderByWithRelationInput
    shiftAssignments?: ShiftAssignmentOrderByRelationAggregateInput
    description?: SortOrder
    baseHourlyRate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    workerSlots?: SortOrder
    blockedWorkers?: BlockedWorkerOrderByRelationAggregateInput
  }

  export type ShiftWhereUniqueInput = {
    uuid?: string
  }

  export type ShiftOrderByWithAggregationInput = {
    uuid?: SortOrder
    facilityUuid?: SortOrder
    description?: SortOrder
    baseHourlyRate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    workerSlots?: SortOrder
    _count?: ShiftCountOrderByAggregateInput
    _avg?: ShiftAvgOrderByAggregateInput
    _max?: ShiftMaxOrderByAggregateInput
    _min?: ShiftMinOrderByAggregateInput
    _sum?: ShiftSumOrderByAggregateInput
  }

  export type ShiftScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ShiftScalarWhereWithAggregatesInput>
    OR?: Enumerable<ShiftScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ShiftScalarWhereWithAggregatesInput>
    uuid?: StringWithAggregatesFilter | string
    facilityUuid?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    baseHourlyRate?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    startTime?: DateTimeWithAggregatesFilter | Date | string
    endTime?: DateTimeWithAggregatesFilter | Date | string
    workerSlots?: IntWithAggregatesFilter | number
  }

  export type ShiftAssignmentWhereInput = {
    AND?: Enumerable<ShiftAssignmentWhereInput>
    OR?: Enumerable<ShiftAssignmentWhereInput>
    NOT?: Enumerable<ShiftAssignmentWhereInput>
    shiftUuid?: StringFilter | string
    workerUuid?: StringFilter | string
    shift?: XOR<ShiftRelationFilter, ShiftWhereInput>
    worker?: XOR<WorkerRelationFilter, WorkerWhereInput>
    rating?: IntNullableFilter | number | null
  }

  export type ShiftAssignmentOrderByWithRelationInput = {
    shiftUuid?: SortOrder
    workerUuid?: SortOrder
    shift?: ShiftOrderByWithRelationInput
    worker?: WorkerOrderByWithRelationInput
    rating?: SortOrder
  }

  export type ShiftAssignmentWhereUniqueInput = {
    shiftUuid_workerUuid?: ShiftAssignmentShiftUuidWorkerUuidCompoundUniqueInput
  }

  export type ShiftAssignmentOrderByWithAggregationInput = {
    shiftUuid?: SortOrder
    workerUuid?: SortOrder
    rating?: SortOrder
    _count?: ShiftAssignmentCountOrderByAggregateInput
    _avg?: ShiftAssignmentAvgOrderByAggregateInput
    _max?: ShiftAssignmentMaxOrderByAggregateInput
    _min?: ShiftAssignmentMinOrderByAggregateInput
    _sum?: ShiftAssignmentSumOrderByAggregateInput
  }

  export type ShiftAssignmentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ShiftAssignmentScalarWhereWithAggregatesInput>
    OR?: Enumerable<ShiftAssignmentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ShiftAssignmentScalarWhereWithAggregatesInput>
    shiftUuid?: StringWithAggregatesFilter | string
    workerUuid?: StringWithAggregatesFilter | string
    rating?: IntNullableWithAggregatesFilter | number | null
  }

  export type BlockedWorkerWhereInput = {
    AND?: Enumerable<BlockedWorkerWhereInput>
    OR?: Enumerable<BlockedWorkerWhereInput>
    NOT?: Enumerable<BlockedWorkerWhereInput>
    shiftUuid?: StringFilter | string
    workerUuid?: StringFilter | string
    facilityUuid?: StringFilter | string
    shift?: XOR<ShiftRelationFilter, ShiftWhereInput>
    worker?: XOR<WorkerRelationFilter, WorkerWhereInput>
    facility?: XOR<HealthCareFacilityRelationFilter, HealthCareFacilityWhereInput>
    createdAt?: DateTimeFilter | Date | string
    blockReason?: StringFilter | string
  }

  export type BlockedWorkerOrderByWithRelationInput = {
    shiftUuid?: SortOrder
    workerUuid?: SortOrder
    facilityUuid?: SortOrder
    shift?: ShiftOrderByWithRelationInput
    worker?: WorkerOrderByWithRelationInput
    facility?: HealthCareFacilityOrderByWithRelationInput
    createdAt?: SortOrder
    blockReason?: SortOrder
  }

  export type BlockedWorkerWhereUniqueInput = {
    facilityUuid_workerUuid?: BlockedWorkerFacilityUuidWorkerUuidCompoundUniqueInput
  }

  export type BlockedWorkerOrderByWithAggregationInput = {
    shiftUuid?: SortOrder
    workerUuid?: SortOrder
    facilityUuid?: SortOrder
    createdAt?: SortOrder
    blockReason?: SortOrder
    _count?: BlockedWorkerCountOrderByAggregateInput
    _max?: BlockedWorkerMaxOrderByAggregateInput
    _min?: BlockedWorkerMinOrderByAggregateInput
  }

  export type BlockedWorkerScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BlockedWorkerScalarWhereWithAggregatesInput>
    OR?: Enumerable<BlockedWorkerScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BlockedWorkerScalarWhereWithAggregatesInput>
    shiftUuid?: StringWithAggregatesFilter | string
    workerUuid?: StringWithAggregatesFilter | string
    facilityUuid?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    blockReason?: StringWithAggregatesFilter | string
  }

  export type HealthCareFacilityCreateInput = {
    uuid?: string
    shifts?: ShiftCreateNestedManyWithoutFacilityInput
    name: string
    blockedWorkers?: BlockedWorkerCreateNestedManyWithoutFacilityInput
  }

  export type HealthCareFacilityUncheckedCreateInput = {
    uuid?: string
    shifts?: ShiftUncheckedCreateNestedManyWithoutFacilityInput
    name: string
    blockedWorkers?: BlockedWorkerUncheckedCreateNestedManyWithoutFacilityInput
  }

  export type HealthCareFacilityUpdateInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    shifts?: ShiftUpdateManyWithoutFacilityNestedInput
    name?: StringFieldUpdateOperationsInput | string
    blockedWorkers?: BlockedWorkerUpdateManyWithoutFacilityNestedInput
  }

  export type HealthCareFacilityUncheckedUpdateInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    shifts?: ShiftUncheckedUpdateManyWithoutFacilityNestedInput
    name?: StringFieldUpdateOperationsInput | string
    blockedWorkers?: BlockedWorkerUncheckedUpdateManyWithoutFacilityNestedInput
  }

  export type HealthCareFacilityCreateManyInput = {
    uuid?: string
    name: string
  }

  export type HealthCareFacilityUpdateManyMutationInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type HealthCareFacilityUncheckedUpdateManyInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type WorkerCreateInput = {
    uuid?: string
    shiftAssignments?: ShiftAssignmentCreateNestedManyWithoutWorkerInput
    firstName: string
    lastName: string
    blockedAtFacilities?: BlockedWorkerCreateNestedManyWithoutWorkerInput
  }

  export type WorkerUncheckedCreateInput = {
    uuid?: string
    shiftAssignments?: ShiftAssignmentUncheckedCreateNestedManyWithoutWorkerInput
    firstName: string
    lastName: string
    blockedAtFacilities?: BlockedWorkerUncheckedCreateNestedManyWithoutWorkerInput
  }

  export type WorkerUpdateInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    shiftAssignments?: ShiftAssignmentUpdateManyWithoutWorkerNestedInput
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    blockedAtFacilities?: BlockedWorkerUpdateManyWithoutWorkerNestedInput
  }

  export type WorkerUncheckedUpdateInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    shiftAssignments?: ShiftAssignmentUncheckedUpdateManyWithoutWorkerNestedInput
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    blockedAtFacilities?: BlockedWorkerUncheckedUpdateManyWithoutWorkerNestedInput
  }

  export type WorkerCreateManyInput = {
    uuid?: string
    firstName: string
    lastName: string
  }

  export type WorkerUpdateManyMutationInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
  }

  export type WorkerUncheckedUpdateManyInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
  }

  export type ShiftCreateInput = {
    uuid?: string
    facility: HealthCareFacilityCreateNestedOneWithoutShiftsInput
    shiftAssignments?: ShiftAssignmentCreateNestedManyWithoutShiftInput
    description: string
    baseHourlyRate: number
    createdAt: Date | string
    updatedAt: Date | string
    startTime: Date | string
    endTime: Date | string
    workerSlots: number
    blockedWorkers?: BlockedWorkerCreateNestedManyWithoutShiftInput
  }

  export type ShiftUncheckedCreateInput = {
    uuid?: string
    facilityUuid: string
    shiftAssignments?: ShiftAssignmentUncheckedCreateNestedManyWithoutShiftInput
    description: string
    baseHourlyRate: number
    createdAt: Date | string
    updatedAt: Date | string
    startTime: Date | string
    endTime: Date | string
    workerSlots: number
    blockedWorkers?: BlockedWorkerUncheckedCreateNestedManyWithoutShiftInput
  }

  export type ShiftUpdateInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    facility?: HealthCareFacilityUpdateOneRequiredWithoutShiftsNestedInput
    shiftAssignments?: ShiftAssignmentUpdateManyWithoutShiftNestedInput
    description?: StringFieldUpdateOperationsInput | string
    baseHourlyRate?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    workerSlots?: IntFieldUpdateOperationsInput | number
    blockedWorkers?: BlockedWorkerUpdateManyWithoutShiftNestedInput
  }

  export type ShiftUncheckedUpdateInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    facilityUuid?: StringFieldUpdateOperationsInput | string
    shiftAssignments?: ShiftAssignmentUncheckedUpdateManyWithoutShiftNestedInput
    description?: StringFieldUpdateOperationsInput | string
    baseHourlyRate?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    workerSlots?: IntFieldUpdateOperationsInput | number
    blockedWorkers?: BlockedWorkerUncheckedUpdateManyWithoutShiftNestedInput
  }

  export type ShiftCreateManyInput = {
    uuid?: string
    facilityUuid: string
    description: string
    baseHourlyRate: number
    createdAt: Date | string
    updatedAt: Date | string
    startTime: Date | string
    endTime: Date | string
    workerSlots: number
  }

  export type ShiftUpdateManyMutationInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    baseHourlyRate?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    workerSlots?: IntFieldUpdateOperationsInput | number
  }

  export type ShiftUncheckedUpdateManyInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    facilityUuid?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    baseHourlyRate?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    workerSlots?: IntFieldUpdateOperationsInput | number
  }

  export type ShiftAssignmentCreateInput = {
    shift: ShiftCreateNestedOneWithoutShiftAssignmentsInput
    worker: WorkerCreateNestedOneWithoutShiftAssignmentsInput
    rating?: number | null
  }

  export type ShiftAssignmentUncheckedCreateInput = {
    shiftUuid: string
    workerUuid: string
    rating?: number | null
  }

  export type ShiftAssignmentUpdateInput = {
    shift?: ShiftUpdateOneRequiredWithoutShiftAssignmentsNestedInput
    worker?: WorkerUpdateOneRequiredWithoutShiftAssignmentsNestedInput
    rating?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShiftAssignmentUncheckedUpdateInput = {
    shiftUuid?: StringFieldUpdateOperationsInput | string
    workerUuid?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShiftAssignmentCreateManyInput = {
    shiftUuid: string
    workerUuid: string
    rating?: number | null
  }

  export type ShiftAssignmentUpdateManyMutationInput = {
    rating?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShiftAssignmentUncheckedUpdateManyInput = {
    shiftUuid?: StringFieldUpdateOperationsInput | string
    workerUuid?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BlockedWorkerCreateInput = {
    shift: ShiftCreateNestedOneWithoutBlockedWorkersInput
    worker: WorkerCreateNestedOneWithoutBlockedAtFacilitiesInput
    facility: HealthCareFacilityCreateNestedOneWithoutBlockedWorkersInput
    createdAt: Date | string
    blockReason: string
  }

  export type BlockedWorkerUncheckedCreateInput = {
    shiftUuid: string
    workerUuid: string
    facilityUuid: string
    createdAt: Date | string
    blockReason: string
  }

  export type BlockedWorkerUpdateInput = {
    shift?: ShiftUpdateOneRequiredWithoutBlockedWorkersNestedInput
    worker?: WorkerUpdateOneRequiredWithoutBlockedAtFacilitiesNestedInput
    facility?: HealthCareFacilityUpdateOneRequiredWithoutBlockedWorkersNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blockReason?: StringFieldUpdateOperationsInput | string
  }

  export type BlockedWorkerUncheckedUpdateInput = {
    shiftUuid?: StringFieldUpdateOperationsInput | string
    workerUuid?: StringFieldUpdateOperationsInput | string
    facilityUuid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blockReason?: StringFieldUpdateOperationsInput | string
  }

  export type BlockedWorkerCreateManyInput = {
    shiftUuid: string
    workerUuid: string
    facilityUuid: string
    createdAt: Date | string
    blockReason: string
  }

  export type BlockedWorkerUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blockReason?: StringFieldUpdateOperationsInput | string
  }

  export type BlockedWorkerUncheckedUpdateManyInput = {
    shiftUuid?: StringFieldUpdateOperationsInput | string
    workerUuid?: StringFieldUpdateOperationsInput | string
    facilityUuid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blockReason?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type ShiftListRelationFilter = {
    every?: ShiftWhereInput
    some?: ShiftWhereInput
    none?: ShiftWhereInput
  }

  export type BlockedWorkerListRelationFilter = {
    every?: BlockedWorkerWhereInput
    some?: BlockedWorkerWhereInput
    none?: BlockedWorkerWhereInput
  }

  export type ShiftOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BlockedWorkerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HealthCareFacilityCountOrderByAggregateInput = {
    uuid?: SortOrder
    name?: SortOrder
  }

  export type HealthCareFacilityMaxOrderByAggregateInput = {
    uuid?: SortOrder
    name?: SortOrder
  }

  export type HealthCareFacilityMinOrderByAggregateInput = {
    uuid?: SortOrder
    name?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type ShiftAssignmentListRelationFilter = {
    every?: ShiftAssignmentWhereInput
    some?: ShiftAssignmentWhereInput
    none?: ShiftAssignmentWhereInput
  }

  export type ShiftAssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkerCountOrderByAggregateInput = {
    uuid?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
  }

  export type WorkerMaxOrderByAggregateInput = {
    uuid?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
  }

  export type WorkerMinOrderByAggregateInput = {
    uuid?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
  }

  export type HealthCareFacilityRelationFilter = {
    is?: HealthCareFacilityWhereInput
    isNot?: HealthCareFacilityWhereInput
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type ShiftCountOrderByAggregateInput = {
    uuid?: SortOrder
    facilityUuid?: SortOrder
    description?: SortOrder
    baseHourlyRate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    workerSlots?: SortOrder
  }

  export type ShiftAvgOrderByAggregateInput = {
    baseHourlyRate?: SortOrder
    workerSlots?: SortOrder
  }

  export type ShiftMaxOrderByAggregateInput = {
    uuid?: SortOrder
    facilityUuid?: SortOrder
    description?: SortOrder
    baseHourlyRate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    workerSlots?: SortOrder
  }

  export type ShiftMinOrderByAggregateInput = {
    uuid?: SortOrder
    facilityUuid?: SortOrder
    description?: SortOrder
    baseHourlyRate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    workerSlots?: SortOrder
  }

  export type ShiftSumOrderByAggregateInput = {
    baseHourlyRate?: SortOrder
    workerSlots?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type ShiftRelationFilter = {
    is?: ShiftWhereInput
    isNot?: ShiftWhereInput
  }

  export type WorkerRelationFilter = {
    is?: WorkerWhereInput
    isNot?: WorkerWhereInput
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type ShiftAssignmentShiftUuidWorkerUuidCompoundUniqueInput = {
    shiftUuid: string
    workerUuid: string
  }

  export type ShiftAssignmentCountOrderByAggregateInput = {
    shiftUuid?: SortOrder
    workerUuid?: SortOrder
    rating?: SortOrder
  }

  export type ShiftAssignmentAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type ShiftAssignmentMaxOrderByAggregateInput = {
    shiftUuid?: SortOrder
    workerUuid?: SortOrder
    rating?: SortOrder
  }

  export type ShiftAssignmentMinOrderByAggregateInput = {
    shiftUuid?: SortOrder
    workerUuid?: SortOrder
    rating?: SortOrder
  }

  export type ShiftAssignmentSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type BlockedWorkerFacilityUuidWorkerUuidCompoundUniqueInput = {
    facilityUuid: string
    workerUuid: string
  }

  export type BlockedWorkerCountOrderByAggregateInput = {
    shiftUuid?: SortOrder
    workerUuid?: SortOrder
    facilityUuid?: SortOrder
    createdAt?: SortOrder
    blockReason?: SortOrder
  }

  export type BlockedWorkerMaxOrderByAggregateInput = {
    shiftUuid?: SortOrder
    workerUuid?: SortOrder
    facilityUuid?: SortOrder
    createdAt?: SortOrder
    blockReason?: SortOrder
  }

  export type BlockedWorkerMinOrderByAggregateInput = {
    shiftUuid?: SortOrder
    workerUuid?: SortOrder
    facilityUuid?: SortOrder
    createdAt?: SortOrder
    blockReason?: SortOrder
  }

  export type ShiftCreateNestedManyWithoutFacilityInput = {
    create?: XOR<Enumerable<ShiftCreateWithoutFacilityInput>, Enumerable<ShiftUncheckedCreateWithoutFacilityInput>>
    connectOrCreate?: Enumerable<ShiftCreateOrConnectWithoutFacilityInput>
    createMany?: ShiftCreateManyFacilityInputEnvelope
    connect?: Enumerable<ShiftWhereUniqueInput>
  }

  export type BlockedWorkerCreateNestedManyWithoutFacilityInput = {
    create?: XOR<Enumerable<BlockedWorkerCreateWithoutFacilityInput>, Enumerable<BlockedWorkerUncheckedCreateWithoutFacilityInput>>
    connectOrCreate?: Enumerable<BlockedWorkerCreateOrConnectWithoutFacilityInput>
    createMany?: BlockedWorkerCreateManyFacilityInputEnvelope
    connect?: Enumerable<BlockedWorkerWhereUniqueInput>
  }

  export type ShiftUncheckedCreateNestedManyWithoutFacilityInput = {
    create?: XOR<Enumerable<ShiftCreateWithoutFacilityInput>, Enumerable<ShiftUncheckedCreateWithoutFacilityInput>>
    connectOrCreate?: Enumerable<ShiftCreateOrConnectWithoutFacilityInput>
    createMany?: ShiftCreateManyFacilityInputEnvelope
    connect?: Enumerable<ShiftWhereUniqueInput>
  }

  export type BlockedWorkerUncheckedCreateNestedManyWithoutFacilityInput = {
    create?: XOR<Enumerable<BlockedWorkerCreateWithoutFacilityInput>, Enumerable<BlockedWorkerUncheckedCreateWithoutFacilityInput>>
    connectOrCreate?: Enumerable<BlockedWorkerCreateOrConnectWithoutFacilityInput>
    createMany?: BlockedWorkerCreateManyFacilityInputEnvelope
    connect?: Enumerable<BlockedWorkerWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type ShiftUpdateManyWithoutFacilityNestedInput = {
    create?: XOR<Enumerable<ShiftCreateWithoutFacilityInput>, Enumerable<ShiftUncheckedCreateWithoutFacilityInput>>
    connectOrCreate?: Enumerable<ShiftCreateOrConnectWithoutFacilityInput>
    upsert?: Enumerable<ShiftUpsertWithWhereUniqueWithoutFacilityInput>
    createMany?: ShiftCreateManyFacilityInputEnvelope
    set?: Enumerable<ShiftWhereUniqueInput>
    disconnect?: Enumerable<ShiftWhereUniqueInput>
    delete?: Enumerable<ShiftWhereUniqueInput>
    connect?: Enumerable<ShiftWhereUniqueInput>
    update?: Enumerable<ShiftUpdateWithWhereUniqueWithoutFacilityInput>
    updateMany?: Enumerable<ShiftUpdateManyWithWhereWithoutFacilityInput>
    deleteMany?: Enumerable<ShiftScalarWhereInput>
  }

  export type BlockedWorkerUpdateManyWithoutFacilityNestedInput = {
    create?: XOR<Enumerable<BlockedWorkerCreateWithoutFacilityInput>, Enumerable<BlockedWorkerUncheckedCreateWithoutFacilityInput>>
    connectOrCreate?: Enumerable<BlockedWorkerCreateOrConnectWithoutFacilityInput>
    upsert?: Enumerable<BlockedWorkerUpsertWithWhereUniqueWithoutFacilityInput>
    createMany?: BlockedWorkerCreateManyFacilityInputEnvelope
    set?: Enumerable<BlockedWorkerWhereUniqueInput>
    disconnect?: Enumerable<BlockedWorkerWhereUniqueInput>
    delete?: Enumerable<BlockedWorkerWhereUniqueInput>
    connect?: Enumerable<BlockedWorkerWhereUniqueInput>
    update?: Enumerable<BlockedWorkerUpdateWithWhereUniqueWithoutFacilityInput>
    updateMany?: Enumerable<BlockedWorkerUpdateManyWithWhereWithoutFacilityInput>
    deleteMany?: Enumerable<BlockedWorkerScalarWhereInput>
  }

  export type ShiftUncheckedUpdateManyWithoutFacilityNestedInput = {
    create?: XOR<Enumerable<ShiftCreateWithoutFacilityInput>, Enumerable<ShiftUncheckedCreateWithoutFacilityInput>>
    connectOrCreate?: Enumerable<ShiftCreateOrConnectWithoutFacilityInput>
    upsert?: Enumerable<ShiftUpsertWithWhereUniqueWithoutFacilityInput>
    createMany?: ShiftCreateManyFacilityInputEnvelope
    set?: Enumerable<ShiftWhereUniqueInput>
    disconnect?: Enumerable<ShiftWhereUniqueInput>
    delete?: Enumerable<ShiftWhereUniqueInput>
    connect?: Enumerable<ShiftWhereUniqueInput>
    update?: Enumerable<ShiftUpdateWithWhereUniqueWithoutFacilityInput>
    updateMany?: Enumerable<ShiftUpdateManyWithWhereWithoutFacilityInput>
    deleteMany?: Enumerable<ShiftScalarWhereInput>
  }

  export type BlockedWorkerUncheckedUpdateManyWithoutFacilityNestedInput = {
    create?: XOR<Enumerable<BlockedWorkerCreateWithoutFacilityInput>, Enumerable<BlockedWorkerUncheckedCreateWithoutFacilityInput>>
    connectOrCreate?: Enumerable<BlockedWorkerCreateOrConnectWithoutFacilityInput>
    upsert?: Enumerable<BlockedWorkerUpsertWithWhereUniqueWithoutFacilityInput>
    createMany?: BlockedWorkerCreateManyFacilityInputEnvelope
    set?: Enumerable<BlockedWorkerWhereUniqueInput>
    disconnect?: Enumerable<BlockedWorkerWhereUniqueInput>
    delete?: Enumerable<BlockedWorkerWhereUniqueInput>
    connect?: Enumerable<BlockedWorkerWhereUniqueInput>
    update?: Enumerable<BlockedWorkerUpdateWithWhereUniqueWithoutFacilityInput>
    updateMany?: Enumerable<BlockedWorkerUpdateManyWithWhereWithoutFacilityInput>
    deleteMany?: Enumerable<BlockedWorkerScalarWhereInput>
  }

  export type ShiftAssignmentCreateNestedManyWithoutWorkerInput = {
    create?: XOR<Enumerable<ShiftAssignmentCreateWithoutWorkerInput>, Enumerable<ShiftAssignmentUncheckedCreateWithoutWorkerInput>>
    connectOrCreate?: Enumerable<ShiftAssignmentCreateOrConnectWithoutWorkerInput>
    createMany?: ShiftAssignmentCreateManyWorkerInputEnvelope
    connect?: Enumerable<ShiftAssignmentWhereUniqueInput>
  }

  export type BlockedWorkerCreateNestedManyWithoutWorkerInput = {
    create?: XOR<Enumerable<BlockedWorkerCreateWithoutWorkerInput>, Enumerable<BlockedWorkerUncheckedCreateWithoutWorkerInput>>
    connectOrCreate?: Enumerable<BlockedWorkerCreateOrConnectWithoutWorkerInput>
    createMany?: BlockedWorkerCreateManyWorkerInputEnvelope
    connect?: Enumerable<BlockedWorkerWhereUniqueInput>
  }

  export type ShiftAssignmentUncheckedCreateNestedManyWithoutWorkerInput = {
    create?: XOR<Enumerable<ShiftAssignmentCreateWithoutWorkerInput>, Enumerable<ShiftAssignmentUncheckedCreateWithoutWorkerInput>>
    connectOrCreate?: Enumerable<ShiftAssignmentCreateOrConnectWithoutWorkerInput>
    createMany?: ShiftAssignmentCreateManyWorkerInputEnvelope
    connect?: Enumerable<ShiftAssignmentWhereUniqueInput>
  }

  export type BlockedWorkerUncheckedCreateNestedManyWithoutWorkerInput = {
    create?: XOR<Enumerable<BlockedWorkerCreateWithoutWorkerInput>, Enumerable<BlockedWorkerUncheckedCreateWithoutWorkerInput>>
    connectOrCreate?: Enumerable<BlockedWorkerCreateOrConnectWithoutWorkerInput>
    createMany?: BlockedWorkerCreateManyWorkerInputEnvelope
    connect?: Enumerable<BlockedWorkerWhereUniqueInput>
  }

  export type ShiftAssignmentUpdateManyWithoutWorkerNestedInput = {
    create?: XOR<Enumerable<ShiftAssignmentCreateWithoutWorkerInput>, Enumerable<ShiftAssignmentUncheckedCreateWithoutWorkerInput>>
    connectOrCreate?: Enumerable<ShiftAssignmentCreateOrConnectWithoutWorkerInput>
    upsert?: Enumerable<ShiftAssignmentUpsertWithWhereUniqueWithoutWorkerInput>
    createMany?: ShiftAssignmentCreateManyWorkerInputEnvelope
    set?: Enumerable<ShiftAssignmentWhereUniqueInput>
    disconnect?: Enumerable<ShiftAssignmentWhereUniqueInput>
    delete?: Enumerable<ShiftAssignmentWhereUniqueInput>
    connect?: Enumerable<ShiftAssignmentWhereUniqueInput>
    update?: Enumerable<ShiftAssignmentUpdateWithWhereUniqueWithoutWorkerInput>
    updateMany?: Enumerable<ShiftAssignmentUpdateManyWithWhereWithoutWorkerInput>
    deleteMany?: Enumerable<ShiftAssignmentScalarWhereInput>
  }

  export type BlockedWorkerUpdateManyWithoutWorkerNestedInput = {
    create?: XOR<Enumerable<BlockedWorkerCreateWithoutWorkerInput>, Enumerable<BlockedWorkerUncheckedCreateWithoutWorkerInput>>
    connectOrCreate?: Enumerable<BlockedWorkerCreateOrConnectWithoutWorkerInput>
    upsert?: Enumerable<BlockedWorkerUpsertWithWhereUniqueWithoutWorkerInput>
    createMany?: BlockedWorkerCreateManyWorkerInputEnvelope
    set?: Enumerable<BlockedWorkerWhereUniqueInput>
    disconnect?: Enumerable<BlockedWorkerWhereUniqueInput>
    delete?: Enumerable<BlockedWorkerWhereUniqueInput>
    connect?: Enumerable<BlockedWorkerWhereUniqueInput>
    update?: Enumerable<BlockedWorkerUpdateWithWhereUniqueWithoutWorkerInput>
    updateMany?: Enumerable<BlockedWorkerUpdateManyWithWhereWithoutWorkerInput>
    deleteMany?: Enumerable<BlockedWorkerScalarWhereInput>
  }

  export type ShiftAssignmentUncheckedUpdateManyWithoutWorkerNestedInput = {
    create?: XOR<Enumerable<ShiftAssignmentCreateWithoutWorkerInput>, Enumerable<ShiftAssignmentUncheckedCreateWithoutWorkerInput>>
    connectOrCreate?: Enumerable<ShiftAssignmentCreateOrConnectWithoutWorkerInput>
    upsert?: Enumerable<ShiftAssignmentUpsertWithWhereUniqueWithoutWorkerInput>
    createMany?: ShiftAssignmentCreateManyWorkerInputEnvelope
    set?: Enumerable<ShiftAssignmentWhereUniqueInput>
    disconnect?: Enumerable<ShiftAssignmentWhereUniqueInput>
    delete?: Enumerable<ShiftAssignmentWhereUniqueInput>
    connect?: Enumerable<ShiftAssignmentWhereUniqueInput>
    update?: Enumerable<ShiftAssignmentUpdateWithWhereUniqueWithoutWorkerInput>
    updateMany?: Enumerable<ShiftAssignmentUpdateManyWithWhereWithoutWorkerInput>
    deleteMany?: Enumerable<ShiftAssignmentScalarWhereInput>
  }

  export type BlockedWorkerUncheckedUpdateManyWithoutWorkerNestedInput = {
    create?: XOR<Enumerable<BlockedWorkerCreateWithoutWorkerInput>, Enumerable<BlockedWorkerUncheckedCreateWithoutWorkerInput>>
    connectOrCreate?: Enumerable<BlockedWorkerCreateOrConnectWithoutWorkerInput>
    upsert?: Enumerable<BlockedWorkerUpsertWithWhereUniqueWithoutWorkerInput>
    createMany?: BlockedWorkerCreateManyWorkerInputEnvelope
    set?: Enumerable<BlockedWorkerWhereUniqueInput>
    disconnect?: Enumerable<BlockedWorkerWhereUniqueInput>
    delete?: Enumerable<BlockedWorkerWhereUniqueInput>
    connect?: Enumerable<BlockedWorkerWhereUniqueInput>
    update?: Enumerable<BlockedWorkerUpdateWithWhereUniqueWithoutWorkerInput>
    updateMany?: Enumerable<BlockedWorkerUpdateManyWithWhereWithoutWorkerInput>
    deleteMany?: Enumerable<BlockedWorkerScalarWhereInput>
  }

  export type HealthCareFacilityCreateNestedOneWithoutShiftsInput = {
    create?: XOR<HealthCareFacilityCreateWithoutShiftsInput, HealthCareFacilityUncheckedCreateWithoutShiftsInput>
    connectOrCreate?: HealthCareFacilityCreateOrConnectWithoutShiftsInput
    connect?: HealthCareFacilityWhereUniqueInput
  }

  export type ShiftAssignmentCreateNestedManyWithoutShiftInput = {
    create?: XOR<Enumerable<ShiftAssignmentCreateWithoutShiftInput>, Enumerable<ShiftAssignmentUncheckedCreateWithoutShiftInput>>
    connectOrCreate?: Enumerable<ShiftAssignmentCreateOrConnectWithoutShiftInput>
    createMany?: ShiftAssignmentCreateManyShiftInputEnvelope
    connect?: Enumerable<ShiftAssignmentWhereUniqueInput>
  }

  export type BlockedWorkerCreateNestedManyWithoutShiftInput = {
    create?: XOR<Enumerable<BlockedWorkerCreateWithoutShiftInput>, Enumerable<BlockedWorkerUncheckedCreateWithoutShiftInput>>
    connectOrCreate?: Enumerable<BlockedWorkerCreateOrConnectWithoutShiftInput>
    createMany?: BlockedWorkerCreateManyShiftInputEnvelope
    connect?: Enumerable<BlockedWorkerWhereUniqueInput>
  }

  export type ShiftAssignmentUncheckedCreateNestedManyWithoutShiftInput = {
    create?: XOR<Enumerable<ShiftAssignmentCreateWithoutShiftInput>, Enumerable<ShiftAssignmentUncheckedCreateWithoutShiftInput>>
    connectOrCreate?: Enumerable<ShiftAssignmentCreateOrConnectWithoutShiftInput>
    createMany?: ShiftAssignmentCreateManyShiftInputEnvelope
    connect?: Enumerable<ShiftAssignmentWhereUniqueInput>
  }

  export type BlockedWorkerUncheckedCreateNestedManyWithoutShiftInput = {
    create?: XOR<Enumerable<BlockedWorkerCreateWithoutShiftInput>, Enumerable<BlockedWorkerUncheckedCreateWithoutShiftInput>>
    connectOrCreate?: Enumerable<BlockedWorkerCreateOrConnectWithoutShiftInput>
    createMany?: BlockedWorkerCreateManyShiftInputEnvelope
    connect?: Enumerable<BlockedWorkerWhereUniqueInput>
  }

  export type HealthCareFacilityUpdateOneRequiredWithoutShiftsNestedInput = {
    create?: XOR<HealthCareFacilityCreateWithoutShiftsInput, HealthCareFacilityUncheckedCreateWithoutShiftsInput>
    connectOrCreate?: HealthCareFacilityCreateOrConnectWithoutShiftsInput
    upsert?: HealthCareFacilityUpsertWithoutShiftsInput
    connect?: HealthCareFacilityWhereUniqueInput
    update?: XOR<HealthCareFacilityUpdateWithoutShiftsInput, HealthCareFacilityUncheckedUpdateWithoutShiftsInput>
  }

  export type ShiftAssignmentUpdateManyWithoutShiftNestedInput = {
    create?: XOR<Enumerable<ShiftAssignmentCreateWithoutShiftInput>, Enumerable<ShiftAssignmentUncheckedCreateWithoutShiftInput>>
    connectOrCreate?: Enumerable<ShiftAssignmentCreateOrConnectWithoutShiftInput>
    upsert?: Enumerable<ShiftAssignmentUpsertWithWhereUniqueWithoutShiftInput>
    createMany?: ShiftAssignmentCreateManyShiftInputEnvelope
    set?: Enumerable<ShiftAssignmentWhereUniqueInput>
    disconnect?: Enumerable<ShiftAssignmentWhereUniqueInput>
    delete?: Enumerable<ShiftAssignmentWhereUniqueInput>
    connect?: Enumerable<ShiftAssignmentWhereUniqueInput>
    update?: Enumerable<ShiftAssignmentUpdateWithWhereUniqueWithoutShiftInput>
    updateMany?: Enumerable<ShiftAssignmentUpdateManyWithWhereWithoutShiftInput>
    deleteMany?: Enumerable<ShiftAssignmentScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BlockedWorkerUpdateManyWithoutShiftNestedInput = {
    create?: XOR<Enumerable<BlockedWorkerCreateWithoutShiftInput>, Enumerable<BlockedWorkerUncheckedCreateWithoutShiftInput>>
    connectOrCreate?: Enumerable<BlockedWorkerCreateOrConnectWithoutShiftInput>
    upsert?: Enumerable<BlockedWorkerUpsertWithWhereUniqueWithoutShiftInput>
    createMany?: BlockedWorkerCreateManyShiftInputEnvelope
    set?: Enumerable<BlockedWorkerWhereUniqueInput>
    disconnect?: Enumerable<BlockedWorkerWhereUniqueInput>
    delete?: Enumerable<BlockedWorkerWhereUniqueInput>
    connect?: Enumerable<BlockedWorkerWhereUniqueInput>
    update?: Enumerable<BlockedWorkerUpdateWithWhereUniqueWithoutShiftInput>
    updateMany?: Enumerable<BlockedWorkerUpdateManyWithWhereWithoutShiftInput>
    deleteMany?: Enumerable<BlockedWorkerScalarWhereInput>
  }

  export type ShiftAssignmentUncheckedUpdateManyWithoutShiftNestedInput = {
    create?: XOR<Enumerable<ShiftAssignmentCreateWithoutShiftInput>, Enumerable<ShiftAssignmentUncheckedCreateWithoutShiftInput>>
    connectOrCreate?: Enumerable<ShiftAssignmentCreateOrConnectWithoutShiftInput>
    upsert?: Enumerable<ShiftAssignmentUpsertWithWhereUniqueWithoutShiftInput>
    createMany?: ShiftAssignmentCreateManyShiftInputEnvelope
    set?: Enumerable<ShiftAssignmentWhereUniqueInput>
    disconnect?: Enumerable<ShiftAssignmentWhereUniqueInput>
    delete?: Enumerable<ShiftAssignmentWhereUniqueInput>
    connect?: Enumerable<ShiftAssignmentWhereUniqueInput>
    update?: Enumerable<ShiftAssignmentUpdateWithWhereUniqueWithoutShiftInput>
    updateMany?: Enumerable<ShiftAssignmentUpdateManyWithWhereWithoutShiftInput>
    deleteMany?: Enumerable<ShiftAssignmentScalarWhereInput>
  }

  export type BlockedWorkerUncheckedUpdateManyWithoutShiftNestedInput = {
    create?: XOR<Enumerable<BlockedWorkerCreateWithoutShiftInput>, Enumerable<BlockedWorkerUncheckedCreateWithoutShiftInput>>
    connectOrCreate?: Enumerable<BlockedWorkerCreateOrConnectWithoutShiftInput>
    upsert?: Enumerable<BlockedWorkerUpsertWithWhereUniqueWithoutShiftInput>
    createMany?: BlockedWorkerCreateManyShiftInputEnvelope
    set?: Enumerable<BlockedWorkerWhereUniqueInput>
    disconnect?: Enumerable<BlockedWorkerWhereUniqueInput>
    delete?: Enumerable<BlockedWorkerWhereUniqueInput>
    connect?: Enumerable<BlockedWorkerWhereUniqueInput>
    update?: Enumerable<BlockedWorkerUpdateWithWhereUniqueWithoutShiftInput>
    updateMany?: Enumerable<BlockedWorkerUpdateManyWithWhereWithoutShiftInput>
    deleteMany?: Enumerable<BlockedWorkerScalarWhereInput>
  }

  export type ShiftCreateNestedOneWithoutShiftAssignmentsInput = {
    create?: XOR<ShiftCreateWithoutShiftAssignmentsInput, ShiftUncheckedCreateWithoutShiftAssignmentsInput>
    connectOrCreate?: ShiftCreateOrConnectWithoutShiftAssignmentsInput
    connect?: ShiftWhereUniqueInput
  }

  export type WorkerCreateNestedOneWithoutShiftAssignmentsInput = {
    create?: XOR<WorkerCreateWithoutShiftAssignmentsInput, WorkerUncheckedCreateWithoutShiftAssignmentsInput>
    connectOrCreate?: WorkerCreateOrConnectWithoutShiftAssignmentsInput
    connect?: WorkerWhereUniqueInput
  }

  export type ShiftUpdateOneRequiredWithoutShiftAssignmentsNestedInput = {
    create?: XOR<ShiftCreateWithoutShiftAssignmentsInput, ShiftUncheckedCreateWithoutShiftAssignmentsInput>
    connectOrCreate?: ShiftCreateOrConnectWithoutShiftAssignmentsInput
    upsert?: ShiftUpsertWithoutShiftAssignmentsInput
    connect?: ShiftWhereUniqueInput
    update?: XOR<ShiftUpdateWithoutShiftAssignmentsInput, ShiftUncheckedUpdateWithoutShiftAssignmentsInput>
  }

  export type WorkerUpdateOneRequiredWithoutShiftAssignmentsNestedInput = {
    create?: XOR<WorkerCreateWithoutShiftAssignmentsInput, WorkerUncheckedCreateWithoutShiftAssignmentsInput>
    connectOrCreate?: WorkerCreateOrConnectWithoutShiftAssignmentsInput
    upsert?: WorkerUpsertWithoutShiftAssignmentsInput
    connect?: WorkerWhereUniqueInput
    update?: XOR<WorkerUpdateWithoutShiftAssignmentsInput, WorkerUncheckedUpdateWithoutShiftAssignmentsInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ShiftCreateNestedOneWithoutBlockedWorkersInput = {
    create?: XOR<ShiftCreateWithoutBlockedWorkersInput, ShiftUncheckedCreateWithoutBlockedWorkersInput>
    connectOrCreate?: ShiftCreateOrConnectWithoutBlockedWorkersInput
    connect?: ShiftWhereUniqueInput
  }

  export type WorkerCreateNestedOneWithoutBlockedAtFacilitiesInput = {
    create?: XOR<WorkerCreateWithoutBlockedAtFacilitiesInput, WorkerUncheckedCreateWithoutBlockedAtFacilitiesInput>
    connectOrCreate?: WorkerCreateOrConnectWithoutBlockedAtFacilitiesInput
    connect?: WorkerWhereUniqueInput
  }

  export type HealthCareFacilityCreateNestedOneWithoutBlockedWorkersInput = {
    create?: XOR<HealthCareFacilityCreateWithoutBlockedWorkersInput, HealthCareFacilityUncheckedCreateWithoutBlockedWorkersInput>
    connectOrCreate?: HealthCareFacilityCreateOrConnectWithoutBlockedWorkersInput
    connect?: HealthCareFacilityWhereUniqueInput
  }

  export type ShiftUpdateOneRequiredWithoutBlockedWorkersNestedInput = {
    create?: XOR<ShiftCreateWithoutBlockedWorkersInput, ShiftUncheckedCreateWithoutBlockedWorkersInput>
    connectOrCreate?: ShiftCreateOrConnectWithoutBlockedWorkersInput
    upsert?: ShiftUpsertWithoutBlockedWorkersInput
    connect?: ShiftWhereUniqueInput
    update?: XOR<ShiftUpdateWithoutBlockedWorkersInput, ShiftUncheckedUpdateWithoutBlockedWorkersInput>
  }

  export type WorkerUpdateOneRequiredWithoutBlockedAtFacilitiesNestedInput = {
    create?: XOR<WorkerCreateWithoutBlockedAtFacilitiesInput, WorkerUncheckedCreateWithoutBlockedAtFacilitiesInput>
    connectOrCreate?: WorkerCreateOrConnectWithoutBlockedAtFacilitiesInput
    upsert?: WorkerUpsertWithoutBlockedAtFacilitiesInput
    connect?: WorkerWhereUniqueInput
    update?: XOR<WorkerUpdateWithoutBlockedAtFacilitiesInput, WorkerUncheckedUpdateWithoutBlockedAtFacilitiesInput>
  }

  export type HealthCareFacilityUpdateOneRequiredWithoutBlockedWorkersNestedInput = {
    create?: XOR<HealthCareFacilityCreateWithoutBlockedWorkersInput, HealthCareFacilityUncheckedCreateWithoutBlockedWorkersInput>
    connectOrCreate?: HealthCareFacilityCreateOrConnectWithoutBlockedWorkersInput
    upsert?: HealthCareFacilityUpsertWithoutBlockedWorkersInput
    connect?: HealthCareFacilityWhereUniqueInput
    update?: XOR<HealthCareFacilityUpdateWithoutBlockedWorkersInput, HealthCareFacilityUncheckedUpdateWithoutBlockedWorkersInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type ShiftCreateWithoutFacilityInput = {
    uuid?: string
    shiftAssignments?: ShiftAssignmentCreateNestedManyWithoutShiftInput
    description: string
    baseHourlyRate: number
    createdAt: Date | string
    updatedAt: Date | string
    startTime: Date | string
    endTime: Date | string
    workerSlots: number
    blockedWorkers?: BlockedWorkerCreateNestedManyWithoutShiftInput
  }

  export type ShiftUncheckedCreateWithoutFacilityInput = {
    uuid?: string
    shiftAssignments?: ShiftAssignmentUncheckedCreateNestedManyWithoutShiftInput
    description: string
    baseHourlyRate: number
    createdAt: Date | string
    updatedAt: Date | string
    startTime: Date | string
    endTime: Date | string
    workerSlots: number
    blockedWorkers?: BlockedWorkerUncheckedCreateNestedManyWithoutShiftInput
  }

  export type ShiftCreateOrConnectWithoutFacilityInput = {
    where: ShiftWhereUniqueInput
    create: XOR<ShiftCreateWithoutFacilityInput, ShiftUncheckedCreateWithoutFacilityInput>
  }

  export type ShiftCreateManyFacilityInputEnvelope = {
    data: Enumerable<ShiftCreateManyFacilityInput>
    skipDuplicates?: boolean
  }

  export type BlockedWorkerCreateWithoutFacilityInput = {
    shift: ShiftCreateNestedOneWithoutBlockedWorkersInput
    worker: WorkerCreateNestedOneWithoutBlockedAtFacilitiesInput
    createdAt: Date | string
    blockReason: string
  }

  export type BlockedWorkerUncheckedCreateWithoutFacilityInput = {
    shiftUuid: string
    workerUuid: string
    createdAt: Date | string
    blockReason: string
  }

  export type BlockedWorkerCreateOrConnectWithoutFacilityInput = {
    where: BlockedWorkerWhereUniqueInput
    create: XOR<BlockedWorkerCreateWithoutFacilityInput, BlockedWorkerUncheckedCreateWithoutFacilityInput>
  }

  export type BlockedWorkerCreateManyFacilityInputEnvelope = {
    data: Enumerable<BlockedWorkerCreateManyFacilityInput>
    skipDuplicates?: boolean
  }

  export type ShiftUpsertWithWhereUniqueWithoutFacilityInput = {
    where: ShiftWhereUniqueInput
    update: XOR<ShiftUpdateWithoutFacilityInput, ShiftUncheckedUpdateWithoutFacilityInput>
    create: XOR<ShiftCreateWithoutFacilityInput, ShiftUncheckedCreateWithoutFacilityInput>
  }

  export type ShiftUpdateWithWhereUniqueWithoutFacilityInput = {
    where: ShiftWhereUniqueInput
    data: XOR<ShiftUpdateWithoutFacilityInput, ShiftUncheckedUpdateWithoutFacilityInput>
  }

  export type ShiftUpdateManyWithWhereWithoutFacilityInput = {
    where: ShiftScalarWhereInput
    data: XOR<ShiftUpdateManyMutationInput, ShiftUncheckedUpdateManyWithoutShiftsInput>
  }

  export type ShiftScalarWhereInput = {
    AND?: Enumerable<ShiftScalarWhereInput>
    OR?: Enumerable<ShiftScalarWhereInput>
    NOT?: Enumerable<ShiftScalarWhereInput>
    uuid?: StringFilter | string
    facilityUuid?: StringFilter | string
    description?: StringFilter | string
    baseHourlyRate?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    startTime?: DateTimeFilter | Date | string
    endTime?: DateTimeFilter | Date | string
    workerSlots?: IntFilter | number
  }

  export type BlockedWorkerUpsertWithWhereUniqueWithoutFacilityInput = {
    where: BlockedWorkerWhereUniqueInput
    update: XOR<BlockedWorkerUpdateWithoutFacilityInput, BlockedWorkerUncheckedUpdateWithoutFacilityInput>
    create: XOR<BlockedWorkerCreateWithoutFacilityInput, BlockedWorkerUncheckedCreateWithoutFacilityInput>
  }

  export type BlockedWorkerUpdateWithWhereUniqueWithoutFacilityInput = {
    where: BlockedWorkerWhereUniqueInput
    data: XOR<BlockedWorkerUpdateWithoutFacilityInput, BlockedWorkerUncheckedUpdateWithoutFacilityInput>
  }

  export type BlockedWorkerUpdateManyWithWhereWithoutFacilityInput = {
    where: BlockedWorkerScalarWhereInput
    data: XOR<BlockedWorkerUpdateManyMutationInput, BlockedWorkerUncheckedUpdateManyWithoutBlockedWorkersInput>
  }

  export type BlockedWorkerScalarWhereInput = {
    AND?: Enumerable<BlockedWorkerScalarWhereInput>
    OR?: Enumerable<BlockedWorkerScalarWhereInput>
    NOT?: Enumerable<BlockedWorkerScalarWhereInput>
    shiftUuid?: StringFilter | string
    workerUuid?: StringFilter | string
    facilityUuid?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    blockReason?: StringFilter | string
  }

  export type ShiftAssignmentCreateWithoutWorkerInput = {
    shift: ShiftCreateNestedOneWithoutShiftAssignmentsInput
    rating?: number | null
  }

  export type ShiftAssignmentUncheckedCreateWithoutWorkerInput = {
    shiftUuid: string
    rating?: number | null
  }

  export type ShiftAssignmentCreateOrConnectWithoutWorkerInput = {
    where: ShiftAssignmentWhereUniqueInput
    create: XOR<ShiftAssignmentCreateWithoutWorkerInput, ShiftAssignmentUncheckedCreateWithoutWorkerInput>
  }

  export type ShiftAssignmentCreateManyWorkerInputEnvelope = {
    data: Enumerable<ShiftAssignmentCreateManyWorkerInput>
    skipDuplicates?: boolean
  }

  export type BlockedWorkerCreateWithoutWorkerInput = {
    shift: ShiftCreateNestedOneWithoutBlockedWorkersInput
    facility: HealthCareFacilityCreateNestedOneWithoutBlockedWorkersInput
    createdAt: Date | string
    blockReason: string
  }

  export type BlockedWorkerUncheckedCreateWithoutWorkerInput = {
    shiftUuid: string
    facilityUuid: string
    createdAt: Date | string
    blockReason: string
  }

  export type BlockedWorkerCreateOrConnectWithoutWorkerInput = {
    where: BlockedWorkerWhereUniqueInput
    create: XOR<BlockedWorkerCreateWithoutWorkerInput, BlockedWorkerUncheckedCreateWithoutWorkerInput>
  }

  export type BlockedWorkerCreateManyWorkerInputEnvelope = {
    data: Enumerable<BlockedWorkerCreateManyWorkerInput>
    skipDuplicates?: boolean
  }

  export type ShiftAssignmentUpsertWithWhereUniqueWithoutWorkerInput = {
    where: ShiftAssignmentWhereUniqueInput
    update: XOR<ShiftAssignmentUpdateWithoutWorkerInput, ShiftAssignmentUncheckedUpdateWithoutWorkerInput>
    create: XOR<ShiftAssignmentCreateWithoutWorkerInput, ShiftAssignmentUncheckedCreateWithoutWorkerInput>
  }

  export type ShiftAssignmentUpdateWithWhereUniqueWithoutWorkerInput = {
    where: ShiftAssignmentWhereUniqueInput
    data: XOR<ShiftAssignmentUpdateWithoutWorkerInput, ShiftAssignmentUncheckedUpdateWithoutWorkerInput>
  }

  export type ShiftAssignmentUpdateManyWithWhereWithoutWorkerInput = {
    where: ShiftAssignmentScalarWhereInput
    data: XOR<ShiftAssignmentUpdateManyMutationInput, ShiftAssignmentUncheckedUpdateManyWithoutShiftAssignmentsInput>
  }

  export type ShiftAssignmentScalarWhereInput = {
    AND?: Enumerable<ShiftAssignmentScalarWhereInput>
    OR?: Enumerable<ShiftAssignmentScalarWhereInput>
    NOT?: Enumerable<ShiftAssignmentScalarWhereInput>
    shiftUuid?: StringFilter | string
    workerUuid?: StringFilter | string
    rating?: IntNullableFilter | number | null
  }

  export type BlockedWorkerUpsertWithWhereUniqueWithoutWorkerInput = {
    where: BlockedWorkerWhereUniqueInput
    update: XOR<BlockedWorkerUpdateWithoutWorkerInput, BlockedWorkerUncheckedUpdateWithoutWorkerInput>
    create: XOR<BlockedWorkerCreateWithoutWorkerInput, BlockedWorkerUncheckedCreateWithoutWorkerInput>
  }

  export type BlockedWorkerUpdateWithWhereUniqueWithoutWorkerInput = {
    where: BlockedWorkerWhereUniqueInput
    data: XOR<BlockedWorkerUpdateWithoutWorkerInput, BlockedWorkerUncheckedUpdateWithoutWorkerInput>
  }

  export type BlockedWorkerUpdateManyWithWhereWithoutWorkerInput = {
    where: BlockedWorkerScalarWhereInput
    data: XOR<BlockedWorkerUpdateManyMutationInput, BlockedWorkerUncheckedUpdateManyWithoutBlockedAtFacilitiesInput>
  }

  export type HealthCareFacilityCreateWithoutShiftsInput = {
    uuid?: string
    name: string
    blockedWorkers?: BlockedWorkerCreateNestedManyWithoutFacilityInput
  }

  export type HealthCareFacilityUncheckedCreateWithoutShiftsInput = {
    uuid?: string
    name: string
    blockedWorkers?: BlockedWorkerUncheckedCreateNestedManyWithoutFacilityInput
  }

  export type HealthCareFacilityCreateOrConnectWithoutShiftsInput = {
    where: HealthCareFacilityWhereUniqueInput
    create: XOR<HealthCareFacilityCreateWithoutShiftsInput, HealthCareFacilityUncheckedCreateWithoutShiftsInput>
  }

  export type ShiftAssignmentCreateWithoutShiftInput = {
    worker: WorkerCreateNestedOneWithoutShiftAssignmentsInput
    rating?: number | null
  }

  export type ShiftAssignmentUncheckedCreateWithoutShiftInput = {
    workerUuid: string
    rating?: number | null
  }

  export type ShiftAssignmentCreateOrConnectWithoutShiftInput = {
    where: ShiftAssignmentWhereUniqueInput
    create: XOR<ShiftAssignmentCreateWithoutShiftInput, ShiftAssignmentUncheckedCreateWithoutShiftInput>
  }

  export type ShiftAssignmentCreateManyShiftInputEnvelope = {
    data: Enumerable<ShiftAssignmentCreateManyShiftInput>
    skipDuplicates?: boolean
  }

  export type BlockedWorkerCreateWithoutShiftInput = {
    worker: WorkerCreateNestedOneWithoutBlockedAtFacilitiesInput
    facility: HealthCareFacilityCreateNestedOneWithoutBlockedWorkersInput
    createdAt: Date | string
    blockReason: string
  }

  export type BlockedWorkerUncheckedCreateWithoutShiftInput = {
    workerUuid: string
    facilityUuid: string
    createdAt: Date | string
    blockReason: string
  }

  export type BlockedWorkerCreateOrConnectWithoutShiftInput = {
    where: BlockedWorkerWhereUniqueInput
    create: XOR<BlockedWorkerCreateWithoutShiftInput, BlockedWorkerUncheckedCreateWithoutShiftInput>
  }

  export type BlockedWorkerCreateManyShiftInputEnvelope = {
    data: Enumerable<BlockedWorkerCreateManyShiftInput>
    skipDuplicates?: boolean
  }

  export type HealthCareFacilityUpsertWithoutShiftsInput = {
    update: XOR<HealthCareFacilityUpdateWithoutShiftsInput, HealthCareFacilityUncheckedUpdateWithoutShiftsInput>
    create: XOR<HealthCareFacilityCreateWithoutShiftsInput, HealthCareFacilityUncheckedCreateWithoutShiftsInput>
  }

  export type HealthCareFacilityUpdateWithoutShiftsInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    blockedWorkers?: BlockedWorkerUpdateManyWithoutFacilityNestedInput
  }

  export type HealthCareFacilityUncheckedUpdateWithoutShiftsInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    blockedWorkers?: BlockedWorkerUncheckedUpdateManyWithoutFacilityNestedInput
  }

  export type ShiftAssignmentUpsertWithWhereUniqueWithoutShiftInput = {
    where: ShiftAssignmentWhereUniqueInput
    update: XOR<ShiftAssignmentUpdateWithoutShiftInput, ShiftAssignmentUncheckedUpdateWithoutShiftInput>
    create: XOR<ShiftAssignmentCreateWithoutShiftInput, ShiftAssignmentUncheckedCreateWithoutShiftInput>
  }

  export type ShiftAssignmentUpdateWithWhereUniqueWithoutShiftInput = {
    where: ShiftAssignmentWhereUniqueInput
    data: XOR<ShiftAssignmentUpdateWithoutShiftInput, ShiftAssignmentUncheckedUpdateWithoutShiftInput>
  }

  export type ShiftAssignmentUpdateManyWithWhereWithoutShiftInput = {
    where: ShiftAssignmentScalarWhereInput
    data: XOR<ShiftAssignmentUpdateManyMutationInput, ShiftAssignmentUncheckedUpdateManyWithoutShiftAssignmentsInput>
  }

  export type BlockedWorkerUpsertWithWhereUniqueWithoutShiftInput = {
    where: BlockedWorkerWhereUniqueInput
    update: XOR<BlockedWorkerUpdateWithoutShiftInput, BlockedWorkerUncheckedUpdateWithoutShiftInput>
    create: XOR<BlockedWorkerCreateWithoutShiftInput, BlockedWorkerUncheckedCreateWithoutShiftInput>
  }

  export type BlockedWorkerUpdateWithWhereUniqueWithoutShiftInput = {
    where: BlockedWorkerWhereUniqueInput
    data: XOR<BlockedWorkerUpdateWithoutShiftInput, BlockedWorkerUncheckedUpdateWithoutShiftInput>
  }

  export type BlockedWorkerUpdateManyWithWhereWithoutShiftInput = {
    where: BlockedWorkerScalarWhereInput
    data: XOR<BlockedWorkerUpdateManyMutationInput, BlockedWorkerUncheckedUpdateManyWithoutBlockedWorkersInput>
  }

  export type ShiftCreateWithoutShiftAssignmentsInput = {
    uuid?: string
    facility: HealthCareFacilityCreateNestedOneWithoutShiftsInput
    description: string
    baseHourlyRate: number
    createdAt: Date | string
    updatedAt: Date | string
    startTime: Date | string
    endTime: Date | string
    workerSlots: number
    blockedWorkers?: BlockedWorkerCreateNestedManyWithoutShiftInput
  }

  export type ShiftUncheckedCreateWithoutShiftAssignmentsInput = {
    uuid?: string
    facilityUuid: string
    description: string
    baseHourlyRate: number
    createdAt: Date | string
    updatedAt: Date | string
    startTime: Date | string
    endTime: Date | string
    workerSlots: number
    blockedWorkers?: BlockedWorkerUncheckedCreateNestedManyWithoutShiftInput
  }

  export type ShiftCreateOrConnectWithoutShiftAssignmentsInput = {
    where: ShiftWhereUniqueInput
    create: XOR<ShiftCreateWithoutShiftAssignmentsInput, ShiftUncheckedCreateWithoutShiftAssignmentsInput>
  }

  export type WorkerCreateWithoutShiftAssignmentsInput = {
    uuid?: string
    firstName: string
    lastName: string
    blockedAtFacilities?: BlockedWorkerCreateNestedManyWithoutWorkerInput
  }

  export type WorkerUncheckedCreateWithoutShiftAssignmentsInput = {
    uuid?: string
    firstName: string
    lastName: string
    blockedAtFacilities?: BlockedWorkerUncheckedCreateNestedManyWithoutWorkerInput
  }

  export type WorkerCreateOrConnectWithoutShiftAssignmentsInput = {
    where: WorkerWhereUniqueInput
    create: XOR<WorkerCreateWithoutShiftAssignmentsInput, WorkerUncheckedCreateWithoutShiftAssignmentsInput>
  }

  export type ShiftUpsertWithoutShiftAssignmentsInput = {
    update: XOR<ShiftUpdateWithoutShiftAssignmentsInput, ShiftUncheckedUpdateWithoutShiftAssignmentsInput>
    create: XOR<ShiftCreateWithoutShiftAssignmentsInput, ShiftUncheckedCreateWithoutShiftAssignmentsInput>
  }

  export type ShiftUpdateWithoutShiftAssignmentsInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    facility?: HealthCareFacilityUpdateOneRequiredWithoutShiftsNestedInput
    description?: StringFieldUpdateOperationsInput | string
    baseHourlyRate?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    workerSlots?: IntFieldUpdateOperationsInput | number
    blockedWorkers?: BlockedWorkerUpdateManyWithoutShiftNestedInput
  }

  export type ShiftUncheckedUpdateWithoutShiftAssignmentsInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    facilityUuid?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    baseHourlyRate?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    workerSlots?: IntFieldUpdateOperationsInput | number
    blockedWorkers?: BlockedWorkerUncheckedUpdateManyWithoutShiftNestedInput
  }

  export type WorkerUpsertWithoutShiftAssignmentsInput = {
    update: XOR<WorkerUpdateWithoutShiftAssignmentsInput, WorkerUncheckedUpdateWithoutShiftAssignmentsInput>
    create: XOR<WorkerCreateWithoutShiftAssignmentsInput, WorkerUncheckedCreateWithoutShiftAssignmentsInput>
  }

  export type WorkerUpdateWithoutShiftAssignmentsInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    blockedAtFacilities?: BlockedWorkerUpdateManyWithoutWorkerNestedInput
  }

  export type WorkerUncheckedUpdateWithoutShiftAssignmentsInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    blockedAtFacilities?: BlockedWorkerUncheckedUpdateManyWithoutWorkerNestedInput
  }

  export type ShiftCreateWithoutBlockedWorkersInput = {
    uuid?: string
    facility: HealthCareFacilityCreateNestedOneWithoutShiftsInput
    shiftAssignments?: ShiftAssignmentCreateNestedManyWithoutShiftInput
    description: string
    baseHourlyRate: number
    createdAt: Date | string
    updatedAt: Date | string
    startTime: Date | string
    endTime: Date | string
    workerSlots: number
  }

  export type ShiftUncheckedCreateWithoutBlockedWorkersInput = {
    uuid?: string
    facilityUuid: string
    shiftAssignments?: ShiftAssignmentUncheckedCreateNestedManyWithoutShiftInput
    description: string
    baseHourlyRate: number
    createdAt: Date | string
    updatedAt: Date | string
    startTime: Date | string
    endTime: Date | string
    workerSlots: number
  }

  export type ShiftCreateOrConnectWithoutBlockedWorkersInput = {
    where: ShiftWhereUniqueInput
    create: XOR<ShiftCreateWithoutBlockedWorkersInput, ShiftUncheckedCreateWithoutBlockedWorkersInput>
  }

  export type WorkerCreateWithoutBlockedAtFacilitiesInput = {
    uuid?: string
    shiftAssignments?: ShiftAssignmentCreateNestedManyWithoutWorkerInput
    firstName: string
    lastName: string
  }

  export type WorkerUncheckedCreateWithoutBlockedAtFacilitiesInput = {
    uuid?: string
    shiftAssignments?: ShiftAssignmentUncheckedCreateNestedManyWithoutWorkerInput
    firstName: string
    lastName: string
  }

  export type WorkerCreateOrConnectWithoutBlockedAtFacilitiesInput = {
    where: WorkerWhereUniqueInput
    create: XOR<WorkerCreateWithoutBlockedAtFacilitiesInput, WorkerUncheckedCreateWithoutBlockedAtFacilitiesInput>
  }

  export type HealthCareFacilityCreateWithoutBlockedWorkersInput = {
    uuid?: string
    shifts?: ShiftCreateNestedManyWithoutFacilityInput
    name: string
  }

  export type HealthCareFacilityUncheckedCreateWithoutBlockedWorkersInput = {
    uuid?: string
    shifts?: ShiftUncheckedCreateNestedManyWithoutFacilityInput
    name: string
  }

  export type HealthCareFacilityCreateOrConnectWithoutBlockedWorkersInput = {
    where: HealthCareFacilityWhereUniqueInput
    create: XOR<HealthCareFacilityCreateWithoutBlockedWorkersInput, HealthCareFacilityUncheckedCreateWithoutBlockedWorkersInput>
  }

  export type ShiftUpsertWithoutBlockedWorkersInput = {
    update: XOR<ShiftUpdateWithoutBlockedWorkersInput, ShiftUncheckedUpdateWithoutBlockedWorkersInput>
    create: XOR<ShiftCreateWithoutBlockedWorkersInput, ShiftUncheckedCreateWithoutBlockedWorkersInput>
  }

  export type ShiftUpdateWithoutBlockedWorkersInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    facility?: HealthCareFacilityUpdateOneRequiredWithoutShiftsNestedInput
    shiftAssignments?: ShiftAssignmentUpdateManyWithoutShiftNestedInput
    description?: StringFieldUpdateOperationsInput | string
    baseHourlyRate?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    workerSlots?: IntFieldUpdateOperationsInput | number
  }

  export type ShiftUncheckedUpdateWithoutBlockedWorkersInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    facilityUuid?: StringFieldUpdateOperationsInput | string
    shiftAssignments?: ShiftAssignmentUncheckedUpdateManyWithoutShiftNestedInput
    description?: StringFieldUpdateOperationsInput | string
    baseHourlyRate?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    workerSlots?: IntFieldUpdateOperationsInput | number
  }

  export type WorkerUpsertWithoutBlockedAtFacilitiesInput = {
    update: XOR<WorkerUpdateWithoutBlockedAtFacilitiesInput, WorkerUncheckedUpdateWithoutBlockedAtFacilitiesInput>
    create: XOR<WorkerCreateWithoutBlockedAtFacilitiesInput, WorkerUncheckedCreateWithoutBlockedAtFacilitiesInput>
  }

  export type WorkerUpdateWithoutBlockedAtFacilitiesInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    shiftAssignments?: ShiftAssignmentUpdateManyWithoutWorkerNestedInput
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
  }

  export type WorkerUncheckedUpdateWithoutBlockedAtFacilitiesInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    shiftAssignments?: ShiftAssignmentUncheckedUpdateManyWithoutWorkerNestedInput
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
  }

  export type HealthCareFacilityUpsertWithoutBlockedWorkersInput = {
    update: XOR<HealthCareFacilityUpdateWithoutBlockedWorkersInput, HealthCareFacilityUncheckedUpdateWithoutBlockedWorkersInput>
    create: XOR<HealthCareFacilityCreateWithoutBlockedWorkersInput, HealthCareFacilityUncheckedCreateWithoutBlockedWorkersInput>
  }

  export type HealthCareFacilityUpdateWithoutBlockedWorkersInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    shifts?: ShiftUpdateManyWithoutFacilityNestedInput
    name?: StringFieldUpdateOperationsInput | string
  }

  export type HealthCareFacilityUncheckedUpdateWithoutBlockedWorkersInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    shifts?: ShiftUncheckedUpdateManyWithoutFacilityNestedInput
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ShiftCreateManyFacilityInput = {
    uuid?: string
    description: string
    baseHourlyRate: number
    createdAt: Date | string
    updatedAt: Date | string
    startTime: Date | string
    endTime: Date | string
    workerSlots: number
  }

  export type BlockedWorkerCreateManyFacilityInput = {
    shiftUuid: string
    workerUuid: string
    createdAt: Date | string
    blockReason: string
  }

  export type ShiftUpdateWithoutFacilityInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    shiftAssignments?: ShiftAssignmentUpdateManyWithoutShiftNestedInput
    description?: StringFieldUpdateOperationsInput | string
    baseHourlyRate?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    workerSlots?: IntFieldUpdateOperationsInput | number
    blockedWorkers?: BlockedWorkerUpdateManyWithoutShiftNestedInput
  }

  export type ShiftUncheckedUpdateWithoutFacilityInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    shiftAssignments?: ShiftAssignmentUncheckedUpdateManyWithoutShiftNestedInput
    description?: StringFieldUpdateOperationsInput | string
    baseHourlyRate?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    workerSlots?: IntFieldUpdateOperationsInput | number
    blockedWorkers?: BlockedWorkerUncheckedUpdateManyWithoutShiftNestedInput
  }

  export type ShiftUncheckedUpdateManyWithoutShiftsInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    baseHourlyRate?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    workerSlots?: IntFieldUpdateOperationsInput | number
  }

  export type BlockedWorkerUpdateWithoutFacilityInput = {
    shift?: ShiftUpdateOneRequiredWithoutBlockedWorkersNestedInput
    worker?: WorkerUpdateOneRequiredWithoutBlockedAtFacilitiesNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blockReason?: StringFieldUpdateOperationsInput | string
  }

  export type BlockedWorkerUncheckedUpdateWithoutFacilityInput = {
    shiftUuid?: StringFieldUpdateOperationsInput | string
    workerUuid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blockReason?: StringFieldUpdateOperationsInput | string
  }

  export type BlockedWorkerUncheckedUpdateManyWithoutBlockedWorkersInput = {
    shiftUuid?: StringFieldUpdateOperationsInput | string
    workerUuid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blockReason?: StringFieldUpdateOperationsInput | string
  }

  export type ShiftAssignmentCreateManyWorkerInput = {
    shiftUuid: string
    rating?: number | null
  }

  export type BlockedWorkerCreateManyWorkerInput = {
    shiftUuid: string
    facilityUuid: string
    createdAt: Date | string
    blockReason: string
  }

  export type ShiftAssignmentUpdateWithoutWorkerInput = {
    shift?: ShiftUpdateOneRequiredWithoutShiftAssignmentsNestedInput
    rating?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShiftAssignmentUncheckedUpdateWithoutWorkerInput = {
    shiftUuid?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShiftAssignmentUncheckedUpdateManyWithoutShiftAssignmentsInput = {
    shiftUuid?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BlockedWorkerUpdateWithoutWorkerInput = {
    shift?: ShiftUpdateOneRequiredWithoutBlockedWorkersNestedInput
    facility?: HealthCareFacilityUpdateOneRequiredWithoutBlockedWorkersNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blockReason?: StringFieldUpdateOperationsInput | string
  }

  export type BlockedWorkerUncheckedUpdateWithoutWorkerInput = {
    shiftUuid?: StringFieldUpdateOperationsInput | string
    facilityUuid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blockReason?: StringFieldUpdateOperationsInput | string
  }

  export type BlockedWorkerUncheckedUpdateManyWithoutBlockedAtFacilitiesInput = {
    shiftUuid?: StringFieldUpdateOperationsInput | string
    facilityUuid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blockReason?: StringFieldUpdateOperationsInput | string
  }

  export type ShiftAssignmentCreateManyShiftInput = {
    workerUuid: string
    rating?: number | null
  }

  export type BlockedWorkerCreateManyShiftInput = {
    workerUuid: string
    facilityUuid: string
    createdAt: Date | string
    blockReason: string
  }

  export type ShiftAssignmentUpdateWithoutShiftInput = {
    worker?: WorkerUpdateOneRequiredWithoutShiftAssignmentsNestedInput
    rating?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShiftAssignmentUncheckedUpdateWithoutShiftInput = {
    workerUuid?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BlockedWorkerUpdateWithoutShiftInput = {
    worker?: WorkerUpdateOneRequiredWithoutBlockedAtFacilitiesNestedInput
    facility?: HealthCareFacilityUpdateOneRequiredWithoutBlockedWorkersNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blockReason?: StringFieldUpdateOperationsInput | string
  }

  export type BlockedWorkerUncheckedUpdateWithoutShiftInput = {
    workerUuid?: StringFieldUpdateOperationsInput | string
    facilityUuid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blockReason?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}